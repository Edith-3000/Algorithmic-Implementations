/*Sieve of Eratosthenes is an algorithm for finding all the prime numbers in a segment [1;n] using O(n*log(log n) operations.
  Sieve of eratosthenes is primarily used when there are multiple queries asked to check primality 
  of given nos.
  Multiple of a prime no. cannot be a prime no.
*/

void sieve_of_eratosthenes(long long n)
{
	//n is the max no. for which we have to check primality
	vector<long long>v(n+1); //v is the sieve of size (n+1)
	for(long long i=0; i<=n; i++)
	  v[i]=1; //initialising all the nos. a prime

	v[0]=0; v[1]=0; //0 & 1 are not primes

	for(long long i=2; i*i<=n; i++)
	{
	   if(v[i]) //i.e. if the current element i is prime
	   {
	      for(long long j=i*i; j<=n; j+=i) 
	      {
	         //marking all the proper multiples of 
	        //the current prime i as non primes
	         v[j]=0;
	      }
	   }
	} 
}

/*CAUTION: Always use the data type of v as bool if time constraint is very less in the problem statement*/

//Time complexity analysis: Preprocessing time - O(n*log(log n))
                            Answers a single query in: O(1)
                            Auxiliary space: O(n)
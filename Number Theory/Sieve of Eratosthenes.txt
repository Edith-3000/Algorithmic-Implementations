/*Sieve of Eratosthenes is an algorithm for finding all the prime numbers in a segment [1;n] using O(n*log₂(log₂n) operations.
  Sieve of eratosthenes is primarily used when there are multiple queries asked to check primality 
  of given nos.
  Multiple of a prime no. cannot be a prime no.
*/

void sieveOfEratosthenes(long long n)
{
	// n is the max no. for which we have to check primality
	vector<long long>v(n+1, 0); //v is the sieve of size (n+1)
	
	// all odd nos. are potential prime numbers
	for(long long i=3; i<=n; i+=2) v[i]=1; 

	v[2]=1; // 2 is a prime num

	for(long long i=3; i*i<=n; i+=2)
	{
	   if(v[i]) //i.e. if the current element i is prime
	   {
	      for(long long j=i*i; j<=n; j+=i) 
	      {
	         // marking all the proper multiples of 
	         // the current prime i as non primes
	         v[j]=0;
	      }
	   }
	} 
}

/*CAUTION: 𝑨𝒍𝒘𝒂𝒚𝒔 𝒖𝒔𝒆 𝒕𝒉𝒆 𝒅𝒂𝒕𝒂 𝒕𝒚𝒑𝒆 𝒐𝒇 𝒗 𝒂𝒔 𝒃𝒐𝒐𝒍/𝒃𝒊𝒕𝒔𝒆𝒕 𝒊𝒇 𝒕𝒊𝒎𝒆 𝒄𝒐𝒏𝒔𝒕𝒓𝒂𝒊𝒏𝒕 𝒊𝒔 𝒗𝒆𝒓𝒚 𝒍𝒆𝒔𝒔 𝒊𝒏 𝒕𝒉𝒆 𝒑𝒓𝒐𝒃𝒍𝒆𝒎 𝒔𝒕𝒂𝒕𝒆𝒎𝒆𝒏𝒕*/

//Limitation of Sieve: Only numbers upto 10⁷ can be stored in the sieve.

//Time complexity analysis: Preprocessing time - O(n*log₂(log₂n))
//                          Answers a single query in: O(1)
//                          Auxiliary space: O(n)
long long compute_xor_from_1_to_n(const long long n)
{
    // Modulus operator are expensive on most of the  
    // computers. n & 3 will be equivalent to n % 4.    
    
    // (n % 4) similar to (n & 3)  
    switch(n & 3) {  
        case 0: return n;      // if n is multiple of 4 
        case 1: return 1;      // If n % 4 gives remainder 1   
        case 2: return n + 1;  // If n % 4 gives remainder 2     
        case 3: return 0;      // If n % 4 gives remainder 3   
    } 

    return EXIT_SUCCESS; //it's just to avoid warning
}

long long compute_xor_from_l_to_r(long long l, long long r) {
    //since xor(1 to l-1) ^ xor(1 to r) = xor(l to r)
	return compute_xor_from_1_to_n(l-1) ^ compute_xor_from_1_to_n(r); 
}

// Question based on concept: https://www.codechef.com/COOK127B/problems/MATXOR
void preprocess(const vector<int> v, vector<vector<int>> &count)
{
	
    // Function to preprocess the given vector and find count of  
   // number of ones upto jth index for ith bit. 

   //it is assmed that each vector element is 32-bit unsigned no.
  // count id of dimensions 32*n
	int i, j, n=v.size();
	for(int i=0; i<32; i++)
	{
	   count[i][0]=0;
	   for(int j=0; j<n; j++)
	   {
          if(j>0) count[i][j]=count[i][j-1]; // store previous count of 1s for ith bit position. 
          if(v[j] & (1<<i)) count[i][j]++; // Check if ith bit for jth element of vector is set or not. 
                                          // If it is set then increase count of 1 for ith bit by 1.
	   }
	}
}

int calculate_xor_of_range(int l, int r, const vector<vector<int>> count)
{
	int no_of_ones, ans=0; //ans for storing final ans 
	                      //no_of_ones for storing the #1s for ith bit in range l to r

	for(int i=0; i<32; i++)
	{
	   no_of_ones=count[i][r] - (l>0 ? count[i][l-1] : 0);
	   if(no_of_ones & 1) ans+=(1<<i);
	}

	return ans;
}
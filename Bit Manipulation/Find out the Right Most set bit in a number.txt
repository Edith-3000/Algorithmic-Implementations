// Link: https://www.techiedelight.com/bit-hacks-part-3-playing-rightmost-set-bit-number/#P2

// NOTE: Here 1 based indexed bit number is returned.

#include <iostream>
#include <bitset>
using namespace std;
 
// returns position of the rightmost set bit of n
int rightmostSetBitPos(int n)
{
    // if number is odd, return 1
    if (n & 1)
        return 1;
 
    // unset rightmost bit and xor with number itself
    n = n ^ (n & (n - 1));
 
    // cout << bitset<8>(n) << endl;
 
    // find the position of the only set bit in the result
    // we can directly return log2(n) + 1 from the function
    int pos = 0;
    while (n)
    {
        n = n >> 1;
        pos++;
    }
    return pos;
}
 
int main()
{
    int n = 20;
 
    cout << n << " in binary is " << bitset<8>(n) << endl;
    cout << "Position of the rightmost set bit is "
            << rightmostSetBitPos(n);
 
    return 0;
}
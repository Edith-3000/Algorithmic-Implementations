//USING THE PREDEFINED FUNCTIONS

__builtin_popcount(n) when n is int
__builtin_popcountl(n) when n is long
__builtin_popcountll(n) when n is long long

*******************************************************************************************************************************************************

//NAIVE IMPLEMENTATION

long long count_set_bits(long long n)
{
	long long count=0;

	while(n)
	{
	   count+=(n & 1)
	   n>>=1; //similar to n/=2
	}

	return count;
}

//Time Complexity: O(log n) 

*********************************************************************************************************************************************************

//BETTER APPROACH USING ITERATIVE IMPLEMENTATION of Brian Kernighan’s Algorithm

/* 1) Subtracting 1 from a decimal number flips all the bits after the rightmost set bit(which is 1) including the rightmost set bit.
   2) So if we subtract a number by 1 and do bitwise & with itself (n & (n-1)), we unset the rightmost set bit. If we do n & (n-1) in a loop and 
      count the no of times loop executes we get the set bit count.
   3) The beauty of this algorithm is the number of times it loops is equal to the number of set bits in a given integer.
*/

long long count_set_bits(long long n)
{
	long long count=0;

	while(n)
    {
       count++;
       n&=(n-1);
    }

    return count;
}	

//Time Complexity: O(no. of set bits in n) 

*********************************************************************************************************************************************************

//USING RECURSIVE IMPLEMENTATION of Brian Kernighan’s Algorithm
  CAUTION: recursive implementations are worse than iterative implementations

long long count_set_bits(long long n)
{
	//base condition
	if(n==0) return 0;

	return 1 + count_set_bits(n & (n-1));
}	

//Time Complexity: O(no. of set bits in n) 

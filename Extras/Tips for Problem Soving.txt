# Following are some line of thoughts to solve algorithmic problems ------>

1. You can find out all the possible conditions for the Problem Statement given.

2. Try to frame any Mathematical Eqⁿ, if suitable.

3. Although this may not work always in CP, but try to use meaningful variable names, sometimes it
   minimizes confusion.

4. Whenever you are asked to find the best subarray or subsequence & the problem involves DP, then you should
   define your DP in such a way that dp[i] store the best subarray or subsequence that ends at the iᵗʰ element.
   ex. problem: https://codeforces.com/contest/1155/problem/D

5. In some problems doing generalization & observation helps a lot to reach the solution.
   ex. problem: https://codeforces.com/contest/1476/problem/D

6. Some mathematical equations and prof by contradiction also helps.

7. Sometimes even though the final answer is well fitted in "int" and you have used "long long" may give "Runtime
   Error" or "Time Limit Exceeded".

8. At times it becomes easier if you can draw out somee conclusions from the final answer which may help in getting
   to the result. For eg. it can be done in questions related to strings.

9. Whenever we are trying to solve a problem using DP on Trees approach, it is advisable to try root the tree at
   any arbitrary node. 

10. When you are dealing with a "Number Theory" problem try to think out loud in terms of prime numbers, it doesn't
    always helps but few times it does.

11. Final checks before submit:
    1. Array size or integer overflow, like uninitialised 0 index.
    2. Think twice,code once. Check all possible counter test case.
    3. Be careful about corner casees like n = 1 ? or k = 1 ? something about 0 ?
    4. Avoid stupid mistake, like time complexity (t/m) ? or precision error ? or submit same code twice ?
    5. If got WA than remember that you are missing something common.
    6. Minus mod ans = (ans - k + mod) % mod;
 
12. IF WA: 
    1. Corner case, like n = 1 ? k = 1 ? or something about 0 ?
    2. Check code (avoid stupid mistake)
    3. Read the statement again (if there any missing point).
    4. Check the idea (check all possible counter test cases again.)
    5. Don't waste too much time, move to next problem. 

13. TIME AND MEMORY LIMITS
    1. 1 second is approximately 10^8 operations (c++)
    2. 10^6 Elements of 32 Bit (4 bytes) is equal to 4 MB
    3. 62x10^6 Elements of 32 Bit (4 bytes) is equal to 250 MB
    4. 10^6 Elements of 64 Bits (8 bytes) is equal to 8 MB
    5. 31x10^6 Elements of 64 Bit (8 bytes) is equal to 250 MB

14. Sometimes looking at the test cases reveal a lot about how the problem can be solved.
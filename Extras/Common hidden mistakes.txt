# If the algorithm seems very robust but still don't give desired result, then check for the following
  parameters --------->
1. There might be possibility of 𝑺𝒆𝒈𝒎𝒆𝒏𝒕𝒂𝒕𝒊𝒐𝒏 𝑭𝒂𝒖𝒍𝒕.

2. It is possible that the fⁿ name or variable name you are using is a 𝒌𝒆𝒚𝒘𝒐𝒓𝒅 in the language.

3. See if the #𝑻𝒆𝒔𝒕 𝑪𝒂𝒔𝒆𝒔 are correct.

4. Be cautious whether you've passed the arguements to fⁿs. by 𝒓𝒆𝒇𝒆𝒓𝒆𝒏𝒄𝒆 or by 𝒄𝒐𝒑𝒚.

5. See if you're using 𝒄𝒐𝒓𝒓𝒆𝒄𝒕 𝒊𝒏𝒅𝒆𝒙𝒊𝒏𝒈 either 0 - based or 1 - based.

6. Don't ever use indexing to insert in container if their size hasn't been declared beforehand.
   Eg. vector<int> v;
       Then don't ever use v[i]=100;
       This will always give 𝑺𝒆𝒈𝒎𝒆𝒏𝒕𝒂𝒕𝒊𝒐𝒏 𝑭𝒂𝒖𝒍𝒕 (𝒄𝒐𝒓𝒆 𝒅𝒖𝒎𝒑𝒆𝒅).
       To correct it either use v.push_back(100);
                     or declare vector size i.e. vector<int> v(size);

7. Always check if there is only 1 𝒕𝒆𝒔𝒕 𝒄𝒂𝒔𝒆 in i/p, 𝒄𝒐𝒎𝒎𝒆𝒏𝒕 𝒐𝒖𝒕 𝒕𝒉𝒆 𝒍𝒊𝒏𝒆 𝒄𝒊𝒏>>𝒕 𝒊𝒏 𝒚𝒐𝒖𝒓 𝒕𝒆𝒎𝒑𝒍𝒂𝒕𝒆.

8. Check for the 𝑬𝑫𝑮𝑬 𝑪𝑨𝑺𝑬𝑺.

9. Remember, most of the times 𝑺𝑨𝑴𝑷𝑳𝑬 𝑰/𝑷 & 𝑶/𝑷 given are 𝑴𝑰𝑺𝑳𝑬𝑨𝑫𝑰𝑵𝑮.

9. Don't 𝑨𝑺𝑺𝑼𝑴𝑬 𝒂𝒏𝒚𝒕𝒉𝒊𝒏𝒈 by 𝒚𝒐𝒖𝒓𝒔𝒆𝒍𝒇, follow the things written in problem statement, no self assumption.

10. Sometimes there are questions having possibility of 𝑴𝑼𝑳𝑻𝑰𝑷𝑳𝑬 𝑨𝑵𝑺𝑾𝑬𝑹𝑺, so if the o/p doesn't 
    matches with the eg. o/p just submit the code and check if answer is correct or not.

11. Always analyze the 𝑪𝑶𝑵𝑺𝑻𝑹𝑨𝑰𝑵𝑻𝑺 very carefully, sometimes the answer lies in the constraints.

12. Don't 𝑩𝑳𝑰𝑵𝑫𝑳𝒀 make the data type of std::vector as 𝒊𝒏𝒕, as it becomes a habit many a times.

13. In C++ we can omit the curly braces after if-else statements, or after any loop. If we do not use 
    curly braces then only one statement after the if-else or loop will be considered under that block.
    𝑩𝒖𝒕 𝑹𝑬𝑴𝑬𝑴𝑩𝑬𝑹, 𝒇𝒖𝒏𝒄𝒕𝒊𝒐𝒏 𝒅𝒆𝒇𝒊𝒏𝒊𝒕𝒊𝒐𝒏𝒔 𝒂𝒓𝒆 𝒕𝒐 𝒃𝒆 𝒊𝒏𝒄𝒍𝒖𝒅𝒆𝒅 𝒊𝒏 𝒄𝒖𝒓𝒍𝒚 { } 𝒃𝒓𝒂𝒄𝒆𝒔, 𝒆𝒗𝒆𝒏 𝒊𝒇 𝒕𝒉𝒆 𝒇𝒖𝒏𝒄𝒕𝒊𝒐𝒏 
    𝒅𝒆𝒇𝒊𝒏𝒊𝒕𝒊𝒐𝒏 𝒊𝒔 𝒐𝒇 1 𝒍𝒊𝒏𝒆 𝒐𝒏𝒍𝒚, 𝒐𝒕𝒉𝒆𝒓𝒘𝒊𝒔𝒆 𝒇𝒐𝒍𝒍𝒐𝒘𝒊𝒏𝒈 𝒆𝒓𝒓𝒐𝒓 𝒘𝒊𝒍𝒍 𝒃𝒆 𝒔𝒉𝒐𝒘𝒏 𝒃𝒚 𝒕𝒉𝒆 𝒄𝒐𝒎𝒑𝒊𝒍𝒆𝒓: 
    "𝒏𝒂𝒎𝒆𝒅 𝒓𝒆𝒕𝒖𝒓𝒏 𝒗𝒂𝒍𝒖𝒆𝒔 𝒂𝒓𝒆 𝒏𝒐 𝒍𝒐𝒏𝒈𝒆𝒓 𝒔𝒖𝒑𝒑𝒐𝒓𝒕𝒆𝒅".

14. A vector isn't always of 𝒔𝒊𝒛𝒆 𝒏. 😁😁

15. Make sure you aren't using 'if' instead of 'while' or 'for' instead of 'if'.

16. Read question very carefullt, don't 𝑨𝑺𝑺𝑼𝑴𝑬 𝑨𝑵𝒀𝑻𝑯𝑰𝑵𝑮 𝑩𝒀 𝒀𝑶𝑼𝑹𝑺𝑬𝑳𝑭.

17. While doing division always be extra careful that there might be a possibility that the divisor may be 0 
    which may lead to Runtime Error or NaN.

18. std::unordered_map<> might give you "TLE" in some cases whereas std::map<> might not, this might be possible
    due to collisions in std::unordered_map<>.
    Unordered map might take O(n) as well in some cases. 
    For eg. see these 2 submissions for the same problem: 
    https://codeforces.com/contest/1374/submission/106730383
    https://codeforces.com/contest/1374/submission/106730707

    Same might be true for std::map<> also.
    So use them nicely.

    Nice blog: https://codeforces.com/blog/entry/62393

19. For "Multidimensional ARRAYS (i.e. 2D or higher dimensionsl)" their sizes MUST be known at the compile time,
    otherwise it will always give wrong or absurd answer or compile time error.
    Also for 1D arrays it is better to specify their size beforehand as it gives error sometime and sometimes 
    do not, so be on the safe side :)
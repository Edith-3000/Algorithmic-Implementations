//ADDITION OF BIG NUMBERS

//𝑪𝑨𝑼𝑻𝑰𝑶𝑵:- 𝑫𝑶𝑵'𝑻 𝑷𝑨𝑺𝑺 𝑻𝑯𝑬 𝑽𝑬𝑪𝑻𝑶𝑹𝑺 𝒙 & 𝒚 𝑩𝒀 𝑹𝑬𝑭𝑬𝑹𝑬𝑵𝑪𝑬, 𝑱𝑼𝑺𝑻 𝑷𝑨𝑺𝑺 𝑨 𝑪𝑶𝑷𝒀 𝑶𝑭 𝑻𝑯𝑬𝑺𝑬 𝑽𝑬𝑪𝑻𝑶𝑹𝑺 
             𝑺𝑶 𝑨𝑺 𝑻𝑶 𝑨𝑽𝑶𝑰𝑫 𝑨𝑵𝒀 𝑪𝑯𝑨𝑵𝑮𝑬𝑺 𝑰𝑵 𝑻𝑯𝑬 𝑶𝑹𝑰𝑮𝑰𝑵𝑨𝑳 𝑽𝑬𝑪𝑻𝑶𝑹.

vector<int> bigAdd(vector<int> x, vector<int> y)
{
	//Reverse the numbers so that we can add them from units place
	reverse(x.begin(), x.end());
	reverse(y.begin(), y.end());

	//to store the result
	vector<int> res;

	//to add nos. of x[] & y[] one by one
	int len=min(x.size(), y.size()); 
	//to store the carry generated
	int carry=0;

    for(int i=0; i<len; i++)
    {
       //Add the digits at the iᵗʰ pos from x[] and y[] 
       //and add the prev carry
       int val=x[i]+y[i]+carry;

       //Push the sum of digits to res
       res.push_back(val%10);

       //update carry to be forwarded
       carry=val/10;
    }

    //If any digits remain in x[], add them to res
    if(x.size()>len)
    {
       for(int i=len; i<x.size(); i++)
       {
          int val=x[i]+carry;
          res.push_back(val%10);
          carry=val/10;
       }
    }
    
    //If any digits remain in y[], add them to res
    if(y.size()>len)
    {
       for(int i=len; i<y.size(); i++)
       {
          int val=y[i]+carry;
          res.push_back(val%10);
          carry=val/10;
       }
    }
    
    //While there is still some carry left-over, 
    //add new digits to res
    while(carry>0)
    {
       res.push_back(carry%10);
       carry/=10;
    }
    
    //Reverse res to get back actual answer and return res.
    reverse(res.begin(), res.end());
    return res;
}

****************************************************************************************************************

//SUBTRACTION OF BIG NUMBERS

//𝑪𝑨𝑼𝑻𝑰𝑶𝑵:- 𝑫𝑶𝑵'𝑻 𝑷𝑨𝑺𝑺 𝑻𝑯𝑬 𝑽𝑬𝑪𝑻𝑶𝑹𝑺 𝒙 & 𝒚 𝑩𝒀 𝑹𝑬𝑭𝑬𝑹𝑬𝑵𝑪𝑬, 𝑱𝑼𝑺𝑻 𝑷𝑨𝑺𝑺 𝑨 𝑪𝑶𝑷𝒀 𝑶𝑭 𝑻𝑯𝑬𝑺𝑬 𝑽𝑬𝑪𝑻𝑶𝑹𝑺 
             𝑺𝑶 𝑨𝑺 𝑻𝑶 𝑨𝑽𝑶𝑰𝑫 𝑨𝑵𝒀 𝑪𝑯𝑨𝑵𝑮𝑬𝑺 𝑰𝑵 𝑻𝑯𝑬 𝑶𝑹𝑰𝑮𝑰𝑵𝑨𝑳 𝑽𝑬𝑪𝑻𝑶𝑹.

vector<int> bigSub(vector<int> x, vector<int> y)
{
	  //Reverse the numbers so that we can subtract them from units place
	  reverse(x.begin(), x.end());
	  reverse(y.begin(), y.end());

	  //to store the result
	  vector<int> res;
    
    //assumiing value stored in x[] >= value store in y[]
    int len=y.size();

    for(int i=0; i<len; i++)
    {
       if(x[i]<y[i])
       {
          x[i+1]--; //Borrow from next 10's place
          res.push_back(10+x[i]-y[i]); //insert answer for current index
       }
       
       //Simply subtract and push the result
       else //when x[i]>=y[i]
          res.push_back(x[i]-y[i]);
    }
    
    //If there are any digits left in x, just add them to res
    if(x.size()>len)
    {
       for(int i=len; i<x.size(); i++)
       {  
          //x[i] can be -ve if we had borrowed repeatedly
          //from it or initially it was 0 & we borrowed from it
          if(x[i]<0)
          {
             x[i+1]--;
             res.push_back(10+x[i]);
          }

          else //when x[i]>=0
             res.push_back(x[i]);
       }
    }

    reverse(res.begin(), res.end());
    vector<int> final;
    int i=0;
    
    //Omit the leading zeros and return final result
    while(res[i]==0) 
       i++;

    for(; i<res.size(); i++)
       final.push_back(res[i]);

    return final;
}

**************************************************************************************************************rem
//DIVISION OF BIG NUMBER BY A NUMBER

//𝑪𝑨𝑼𝑻𝑰𝑶𝑵:- 𝑫𝑶𝑵'𝑻 𝑷𝑨𝑺𝑺 𝑻𝑯𝑬 𝑽𝑬𝑪𝑻𝑶𝑹 𝒙 𝑩𝒀 𝑹𝑬𝑭𝑬𝑹𝑬𝑵𝑪𝑬, 𝑱𝑼𝑺𝑻 𝑷𝑨𝑺𝑺 𝑨 𝑪𝑶𝑷𝒀 𝑶𝑭 𝑻𝑯𝑬 𝑽𝑬𝑪𝑻𝑶𝑹
             𝑺𝑶 𝑨𝑺 𝑻𝑶 𝑨𝑽𝑶𝑰𝑫 𝑨𝑵𝒀 𝑪𝑯𝑨𝑵𝑮𝑬𝑺 𝑰𝑵 𝑻𝑯𝑬 𝑶𝑹𝑰𝑮𝑰𝑵𝑨𝑳 𝑽𝑬𝑪𝑻𝑶𝑹.

vector<int> bigDiv(vector<int> x, int d)
{
  //to store the result
  vector<int> res;

  // rem stores any previous remainders from division
  int rem=0;
  
  for(int i=0; i<x.size(); i++)
  {
     if(rem)
     {
        // If there are remainders, then add them in 
        // current division
        rem=(10*rem)+x[i];
        res.push_back(rem/d);
        rem%=d;
     }
     
     // when rem==0 i.e. no remainders from prev division
     else 
     {
        // If digit < d, add 0 to res and put the digit as rem
        if(x[i]<d)
        {
           rem=x[i];
           res.push_back(0);
        }

        else //when x[i]>=d, just divide
        {
           rem=x[i]%d;
           res.push_back.(x[i]/d);
        }
     }
  }

  vector<int> final;
  int i=0;
    
  //Omit the leading zeros and return final result
  while(res[i]==0) 
     i++;

  for(; i<res.size(); i++)
     final.push_back(res[i]);

  return final;
}

/* # NOTE: The big number can be taken as input in the form of string & then convert it into 
           corresponding vector.
           For eg. string s; cin>>s;
                   vector<int>v;
                   for(int i=0; i<s.length(); i++)
                      v.push_back(s[i]-'0');
*/

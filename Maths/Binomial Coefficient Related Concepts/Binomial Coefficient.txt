/*#Definition: A binomial coefficient C(n, k) can be defined as the coefficient of x^k in the expansion 
               of (1 + x)ᵏ.
               OR
               A binomial coefficient C(n, k) also gives the number of ways, disregarding order, that k 
               objects can be chosen from among n objects more formally, the number of k-element subsets 
               (or k-combinations) of a n-element set.

  # Properties: 
    • ⁿCᵣ = ⁽ⁿ⁻¹⁾Cᵣ + ⁽ⁿ⁻¹⁾C₍ᵣ₋₁₎
    • ⁿCᵣ = ⁿC₍ₙ₋ᵣ₎
    • C(n, r) = [n * (n-1) * .... * (n-r+1)] / [r * (r-1) * .... * 1]
            = [(n/r) * (n-1)/(r-1) * .....* (n-r+1)/1] ---> total r terms
*/

====================================================================================================================

//RECURSIVE IMPLEMENTATION

long long nCr(long long n, long long r)
{
    // base condition(s)
    if(r==0 || r==n)
        return 1;

    return nCr(n-1, r-1) + nCr(n-1, r);
}

// Time Complexity: O(2ⁿ/sqrt(n))
// For more info visit: https://stackoverflow.com/questions/26228385/time-complexity-of-recursive-algorithm-for-calculating-binomial-coefficient

====================================================================================================================

//MEMOIZED DP IMPLEMENTATION

long long nCr(long long n, long long r)
{
    // base condition(s)
    if(r==0 || r==n)
        return 1;

    if(dp[n][r]!=-1) return dp[n][r];
    return dp[n][r]=nCr(n-1, r-1) + nCr(n-1, r);
}

// dp[][] is a 2 D global matrix/vector, with size (n+1) x (r+1), initialized with -1
// Time Complexity: O(n*r) 
// Space Complexity: O(n*r)

====================================================================================================================

//TABULATION DP IMPLEMENTATION

long long nCr(long long n, long long r)
{
    for(long long i=0; i<=n; i++)
    {
        for(long long j=0; j<=min(i, r); j++)
        {
            // base case(s)
            if(j==0 || j==i)
                dp[i][j]=1;

            else dp[i][j]=dp[i-1][j-1]+dp[i-1][j];
        }
    }

    return dp[i][j];
}

// dp[][] is a 2 D global matrix/vector, with size (n+1) x (r+1)
// Time Complexity: O(n*r) 
// Space Complexity: O(n*r)

====================================================================================================================

//SPACE OPTIMIZED TABULATION DP IMPLEMENTATION

long long nCr(long long n, long long r)
{
    dp[0]=1;

    for(long long i=1; i<=n; i++){
        for(long long j=min(i, r); j>0; j--){
            dp[j]=dp[j]+dp[j-1];
        }
    }

    return dp[r];
}

// dp[] is a 1 D global matrix/vector, with size (r+1)
// Time Complexity: O(n*r) 
// Space Complexity: O(r)

=====================================================================================================================
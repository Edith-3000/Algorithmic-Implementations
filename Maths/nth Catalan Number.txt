/* # In combinatorial mathematics, the Catalan numbers form a sequence of natural 
     numbers that occur in various counting problems, often involving recursively-defined objects.
   
   # ùë™ùíÇùíïùíÇùíçùíÇùíè ùíîùíÜùíìùíäùíÜùíî: 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, .....

   # n·µó ∞ Catalan Number(direct formula) = (¬≤‚ÅøC‚Çô)/(n+1) (indexing is 0 based i.e. for n = 0, 1, 2, 3, ...).
   # n·µó ∞ Catalan Number(recursive relation)= f(n) = Œ£(f(i-1)*f(n-i)), where i goes from 1 to n (for n>=1)
   											 f(0) = 1

   											 OR
    
   	(n+1)·µó ∞ Catalan Number(recursive relation)=	f(n+1) = Œ£(f(i)*f(n-i)), where i goes from 0 to n (for n>=0)
   											    f(0) = 1

   											   Now, replacing n ‚ü∂ n-1
   	‚à¥ n·µó ∞ Catalan Number(recursive relation)=  f(n) = Œ£(f(i)*f(n-1-i)), where i goes from 0 to (n-1) (for n>=1)
   											   f(0) = 1
   
   # Applications ---->
     ‚Ä¢ #BST possible with n nodes = n·µó ∞ Catalan Number = (¬≤‚ÅøC‚Çô)/(n+1)
     ‚Ä¢ #BT possible with n nodes = (n·µó ∞ Catalan Number) * n! = ((¬≤‚ÅøC‚Çô)/(n+1)) * n!
     ‚Ä¢ For more visit: # https://cp-algorithms.com/combinatorics/catalan-numbers.html
                       # Wikipedia
*/

====================================================================================================================

//RECURSIVE IMPLEMENTATION

long long nth_catalan_recursive(long long n)
{
	// base condition(s)
	if(n==0) return 1;
	if(n<0) return -1; // catalan no. for -ve nos. isn't defined
    
    long long res=0; // initialize result
	for(long long i=0; i<n; i++)
	  res+=nth_catalan_recursive(i) * nth_catalan_recursive((n-1)-i);

	return res;  
}  

/*In the above recursive algorithm the 2nd formula is used to calculate n·µó ∞ Catalan nuumber, ‚à¥ for finding the 
  n·µó ∞ term (n-1) is used in place of 'n' in the recurrence relation.
*/

// Time Complexity: O(2‚Åø) ‚àµ Time complexity of above implementation is equivalent to n·µó ∞ catalan number & the 
                            value of n·µó ∞ catalan number is exponential that makes the time complexity exponential.

===================================================================================================================

//DYNAMIC PROGRAMMING IMPLEMENTATION(by BOTTOM UP APPROACH)

long long nth_catalan_dp(long long n, vector<long long> &dp)
{
	//base condition
	if(n<0) return -1; //catalan no. for -ve nos. isn't defined
	dp[0]=1;

	for(long long i=1; i<=n; i++)
	{
	   dp[i]=0; //initializing result for each ith catalan no.
	   for(long long j=0; j<i; j++)
	     dp[i]+=dp[j] * dp[(i-1)-j];
	}

	return dp[n];  
}

// here dp is a vector of size (n+1) to store the the nth catalan no.

// Time Complexity of DP APPROACH: O(n¬≤)

====================================================================================================================

//USING BINOMIAL COEFFICIENT IMPLEMENTATION

long long binomial_coeff(long long n, long long r)
{
	if(r>(n-r)) r=n-r; //since C(n, r) = C(n, n-r) 
	                  //it is done so as to reduce the #iterations

	long long res=1; //initialize result

	for(long long i=0; i<r; i++)
	{
	   res*=(n-i);
	   res/=(r-i);
	}

	return res;
}

long long nth_catalan_by_binomial_coeff(long long n)
{
	long long c=binomial_coeff(2*n, n); //since nth Catalan No.=2nCn/(n+1)
	return c/(n+1);
}

//Time Complexity of BINOMIAL COEFFICIENT APPROACH: O(n)
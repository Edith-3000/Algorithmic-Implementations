/*PROBLEM STATEMENT: For a given number ‘N’, write a function to generate all combination of ‘N’ 
					 pairs of balanced parentheses.
					 Input: N=3
					 Output: ((())), (()()), (())(), ()(()), ()()()
*/

/*UNDERLYING CONCEPT ------>
  # This problem also follows the Subsets pattern and can be mapped to Permutations. 
    We can follow a similar BFS approach.
  # Taking example mentioned above to generate all the combinations of balanced parentheses. 
    Following a BFS approach, we will keep adding open parentheses '('or close parentheses ')'. 
    At each step we need to keep two things in mind:
    ♦ 𝑾𝒆 𝒄𝒂𝒏’𝒕 𝒂𝒅𝒅 𝒎𝒐𝒓𝒆 𝒕𝒉𝒂𝒏 ‘𝑵’ 𝒐𝒑𝒆𝒏 𝒑𝒂𝒓𝒆𝒏𝒕𝒉𝒆𝒔𝒊𝒔.
    ♦ 𝑻𝒐 𝒌𝒆𝒆𝒑 𝒕𝒉𝒆 𝒑𝒂𝒓𝒆𝒏𝒕𝒉𝒆𝒔𝒆𝒔 𝒃𝒂𝒍𝒂𝒏𝒄𝒆𝒅, 𝒘𝒆 𝒄𝒂𝒏 𝒂𝒅𝒅 𝒂 𝒄𝒍𝒐𝒔𝒆 𝒑𝒂𝒓𝒆𝒏𝒕𝒉𝒆𝒔𝒊𝒔 ) 𝒐𝒏𝒍𝒚 𝒘𝒉𝒆𝒏 𝒘𝒆 𝒉𝒂𝒗𝒆 𝒂𝒍𝒓𝒆𝒂𝒅𝒚
      𝒂𝒅𝒅𝒆𝒅 𝒆𝒏𝒐𝒖𝒈𝒉 𝒐𝒑𝒆𝒏 𝒑𝒂𝒓𝒆𝒏𝒕𝒉𝒆𝒔𝒊𝒔 (. 𝑭𝒐𝒓 𝒕𝒉𝒊𝒔, 𝒘𝒆 𝒄𝒂𝒏 𝒌𝒆𝒆𝒑 𝒂 𝒄𝒐𝒖𝒏𝒕 𝒐𝒇 𝒐𝒑𝒆𝒏 𝒂𝒏𝒅 𝒄𝒍𝒐𝒔𝒆 𝒑𝒂𝒓𝒆𝒏𝒕𝒉𝒆𝒔𝒊𝒔 
      𝒘𝒊𝒕𝒉 𝒆𝒗𝒆𝒓𝒚 𝒄𝒐𝒎𝒃𝒊𝒏𝒂𝒕𝒊𝒐𝒏.

  # Following this guideline, let’s generate parentheses for N=3:
    1. Start with an empty combination: ""
    2. At every step, let’s take all combinations of the previous step and add ( or ) keeping the 
       above-mentioned two rules in mind.
    3. For the empty combination, we can add ( since the count of open parenthesis will be less than ‘N’. 
       We can’t add ) as we don’t have an equivalent open parenthesis, so our list of combinations will
       now be: “(”
    4. For the next iteration, let’s take all combinations of the previous set. For “(” we can add another 
       ( to it since the count of open parenthesis will be less than ‘N’. 
       We can also add ) as we do have an equivalent open parenthesis, so our list of combinations will be: “((”, “()”
    5. In the next iteration, for the first combination “((”, we can add another ( to it as the count of 
       open parenthesis will be less than ‘N’, we can also add ) as we do have an equivalent open parenthesis.
       This gives us two new combinations: “(((” and “(()”.
       For the second combination “()”, we can add another ( to it since the count of open parenthesis will be less than ‘N’. We can’t add ) as we don’t have an equivalent open parenthesis, so our list of 
       combinations will be: “(((”, “(()”, ()("
    6. Following the same approach, next we will get the following list of combinations: 
       “((()”, “(()(”, “(())”, “()((”, “()()”
    7. Next we will get: “((())”, “(()()”, “(())(”, “()(()”, “()()(”
    8. Finally, we will have the following combinations of balanced parentheses: 
       “((()))”, “(()())”, “(())()”, “()(())”, “()()()”
    9. We can’t add more parentheses to any of the combinations, so we stop here.
*/

#include<iostream>
#include<vector>
#include<string>
#include<queue>
using namespace std;

class ParenthesesStr
{
	public:
		// data members
		string str;
		int openCount=0; // open parentheses count
		int closeCount=0; // close parentheses count
		
		// constructor(member function)
		ParenthesesStr(string str, int openCount, int closeCount)
		{
			this->str=str;
			this->openCount=openCount;
			this->closeCount=closeCount;
		}
};

class Solve
{
	public:
		static vector<string> generateValidParentheses(int n)
		{
			vector<string> res;
			if(n<=0)
				return res;
				
			queue<ParenthesesStr> q;
			q.push({"", 0, 0});
			
			while(!q.empty())
			{
				ParenthesesStr ps=q.front();
				q.pop();
				
				// if we reached the maximum number of open and close parenzheses,
                // add it to the result
				if(ps.openCount==n && ps.closeCount==n)
					res.push_back(ps.str);
					
				else
				{
					// if we can add an open parentheses add it
					if(ps.openCount<n)
						q.push({ps.str + "(", ps.openCount+1, ps.closeCount});
					
					// if we can add an close parentheses add it
					if(ps.closeCount<ps.openCount)
						q.push({ps.str + ")", ps.openCount, ps.closeCount+1});
				}
			}
			
			// return the final result
			return res;
		}
};

int main(int argc, char *argv[])
{
	vector<string> res=Solve::generateValidParentheses(4);
	for(auto s: res){
		cout<<s<<" "<<"\n";
	} 
}

/*# Time complexity ---->
  # If we don’t care for the ordering - that ) can only come after ( - then we have two options for 
    every position, i.e., either put open parentheses or close parentheses. 
    This means we can have a maximum of 2²ⁿ combinations. Because of the ordering, the actual number 
    will be less than 2²ⁿ.
  # If we see the visual representation of Example given in problem statement closely it is realized 
    that, in the worst case, it is equivalent to a binary tree, where each node will have two children. 
    This means that we will have 2ⁿ leaf nodes (∵ #𝒍𝒆𝒂𝒇 𝒏𝒐𝒅𝒆𝒔 𝒊𝒏 𝒂 𝒑𝒆𝒓𝒇𝒆𝒄𝒕 𝒃𝒊𝒏𝒂𝒓𝒚 𝒕𝒓𝒆𝒆 𝒐𝒇 𝒉𝒆𝒊𝒈𝒉𝒕 𝒉 = 2ʰ).
    and 2ⁿ-1 intermediate nodes. (∵ #𝒊𝒏𝒕𝒆𝒓𝒏𝒂𝒍 𝒏𝒐𝒅𝒆𝒔 𝒊𝒏 𝒂 𝒑𝒆𝒓𝒇𝒆𝒄𝒕 𝒃𝒊𝒏𝒂𝒓𝒚 𝒕𝒓𝒆𝒆 𝒐𝒇 𝒉𝒆𝒊𝒈𝒉𝒕 𝒉 = (2ʰ-1).
    So the total number of elements pushed to the queue will be (2ⁿ+2ⁿ-1)=(2ⁿ⁺¹-1), which is 
    asymptotically equivalent to (2ⁿ).
​​  # While processing each element, we do need to concatenate the current string with ( or ). 
    This operation will take O(n).
    So the overall time complexity of algorithm will be O(n x 2ⁿ). 

  # NOTE: This is not completely accurate but reasonable enough to be presented in the interview.
  # The actual time complexity (O(4ⁿ/sqrt(n)) is bounded by the Catalan number.

  # Space complexity ---->
  # All the additional space used by algorithm is for the output list. 
    Since we can’t have more than O(2ⁿ) combinations, the space complexity is O(n x 2ⁿ).
*/

================================================================================================================

// ALTERNATE RECURSIVE APPROACH

#include<iostream>
#include<vector>
#include<string>
#include<queue>
using namespace std;

class Solve
{
	public:
		static vector<string> generateValidParenthesesRecur(int n)
		{
			vector<string> res;
			if(n<=0)
				return res;
				
			vector<char> parenthesesStr(2*n);
			utility(n, 0, 0, 0, parenthesesStr, res);
			
			return res;
		}
	
	private:
		static void utility(int n, int openCount, int closeCount, 
					 int index, vector<char> &parenthesesStr, 
					 vector<string> &res)
		{
			// if we reached the maximum number of open and close parenzheses,
            // add it to the result
			if(openCount==n && closeCount==n)
			{
				res.push_back(string(parenthesesStr.begin(), parenthesesStr.end()));
				return;
			}
			
			else
			{
				// if we can add an open parentheses add it
				if(openCount<n)
				{
					parenthesesStr[index]='(';
					utility(n, openCount+1, closeCount, index+1, parenthesesStr, res);
				}
				
				// if we can add an close parentheses add it
				if(closeCount<openCount)
				{
					parenthesesStr[index]=')';
					utility(n, openCount, closeCount+1, index+1, parenthesesStr, res);
				}
			}
		}
};

int main(int argc, char *argv[])
{
	vector<string> res=Solve::generateValidParenthesesRecur(11);
	for(auto s: res){
		cout<<s<<" "<<"\n";
	} cout<<res.size();
}

// Time complexity:
// Space complexity:
/*PROBLEM STATEMENT: Given a word, write a function to generate all of its unique generalized abbreviations.
                     Generalized abbreviation of a word can be generated by replacing each substring of the word 
                     by the count of characters in the substring. 
                     Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”. 
                     After replacing these substrings in the actual word by the count of characters we get all
                     the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.
  Input: "BAT"
  Output: "BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"
  
  Input: "code"
  Output: "code", "cod1", "co1e", "co2", "c1de", "c1d1", "c2e", "c3", "1ode", "1od1", "1o1e", "1o2", 
  "2de", "2d1", "3e", "4"
*/

/*UNDERLYING CONCEPT ------>
  # This problem follows the Subsets pattern and can be mapped to Balanced Parentheses. 
    We can follow a similar BFS approach.
  # Taking example mentioned above to generate all unique generalized abbreviations. 
    Following a BFS approach, we will abbreviate one character at a time.
    At each step we have two options:
    1. Abbreviate the current character, or
    2. Add the current character to the output and skip abbreviation.

  # Following these two rules, let’s abbreviate BAT:
    1. Start with an empty word: ""
    2. At every step, we will take all the combinations from the previous step and apply the two 
       abbreviation rules to the next character.
    3. Take the empty word from the previous step and add the first character to it. 
       We can either abbreviate the character or add it (by skipping abbreviation). 
       This gives us two new words: _, B.
    4. In the next iteration, let’s add the second character. Applying the two rules on _ will give 
       us _ _ and 1A. Applying the above rules to the other combination B gives us B_ and BA.
    5. The next iteration will give us: _ _ _, 2T, 1A_, 1AT, B _ _, B1T, BA_, BAT
    6. The final iteration will give us:3, 2T, 1A1, 1AT, B2, B1T, BA1, BAT
*/
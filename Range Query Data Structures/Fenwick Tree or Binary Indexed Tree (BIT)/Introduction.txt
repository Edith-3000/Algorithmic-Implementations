# References: https://codeforces.com/blog/entry/57292
			        https://brilliant.org/wiki/fenwick-tree/
			        https://cp-algorithms.com/data_structures/fenwick.html

# A Fenwick tree or binary indexed tree is a data structure that helps compute prefix sums efficiently. 
  Computing prefix sums are often important in various other algorithms.

# The nрхЌ╩░ prefix sum of an array is the sum of the first n elements of the array.
  This idea is also referred to as partial sums or cumulative sums.

# BITs are used to efficiently answer certain types of range queries, on ranges from a root to some distant node. 
  They also allow quick updates on individual data points.
  Рђб An example of a range query would be this: "What is the sum of the numbers indexed from [1,x]?"
  Рђб An example of an update would be this: "Increase the number indexed by x by v."
  
  A BIT can perform both of these operations in O(log N) time, and takes O(N) memory.

# BIT[i] will store the answer for the range [l, r], 
  where l = i - 2рхќрхњ╦б + 1 and r = i
  Here pos = 0-based indexing of the 1╦брхЌ set bit in 'i'.
  * Based on observations --->
    1. For all odd indices 'i', BIT[i] will store the answer for the range [i, i]
    2. 1. For all indices 'i' which are powers of 2, BIT[i] will store the answer for the range [1, i]

# A Segment Tree can also perform both of the operations in O(Log N) time, but ­Юњё­Юњљ­Юњј­ЮњЉ­Юњѓ­ЮњЊ­Юњє­ЮњЁ ­Юњў­Юњі­ЮњЋ­ЮњЅ ­ЮЉ║­Юњє­Юњѕ­Юњј­Юњє­ЮњЈ­ЮњЋ ­ЮЉ╗­ЮњЊ­Юњє­Юњє,
  ­ЮЉЕ­Юњі­ЮњЈ­Юњѓ­ЮњЊ­Юњџ ­ЮЉ░­ЮњЈ­ЮњЁ­Юњє­ЮњЎ­Юњє­ЮњЁ ­ЮЉ╗­ЮњЊ­Юњє­Юњє ­ЮњЊ­Юњє­Юњњ­Юњќ­Юњі­ЮњЊ­Юњє­Юњћ ­ЮњЇ­Юњє­Юњћ­Юњћ ­Юњћ­ЮњЉ­Юњѓ­Юњё­Юњє ­Юњѓ­ЮњЈ­ЮњЁ ­Юњі­Юњћ ­Юњє­Юњѓ­Юњћ­Юњі­Юњє­ЮњЊ ­ЮњЋ­Юњљ ­Юњі­Юњј­ЮњЉ­ЮњЇ­Юњє­Юњј­Юњє­ЮњЈ­ЮњЋ.
  ­ЮЉЕ­Юњќ­ЮњЋ ­ЮЉЕ­ЮЉ░­ЮЉ╗ ­Юњі­Юњћ ­ЮњЈ­Юњљ­ЮњЋ ­Юњѓ­Юњћ ­ЮњЉ­Юњљ­Юњў­Юњє­ЮњЊ­ЮњЄ­Юњќ­ЮњЇ ­Юњѓ­Юњћ ­ЮЉ║­Юњє­Юњѕ­Юњј­Юњє­ЮњЈ­ЮњЋ ­ЮЉ╗­ЮњЊ­Юњє­Юњє.

# It is very easy to implement and can be extended for n dimensions.

# Basically BIT is used for Prefix Sum type of queries.
/*PROBLEM STATEMENT: Given an unsorted array of numbers, find Kth smallest number in it.
					 Please note that it is the Kth smallest number in the sorted order, not the Kth 
					 distinct element.
*/

int kthSmallest(vector<int> &v, int k)
{
	if(v.size()==0)
		return INT_MIN;

	priority_queue<int> maxHeap;
 	for(int i=0; i<v.size(); i++)
 	{
 		maxHeap.push(v[i]);

 		if(maxHeap.size()>k)
 			maxHeap.pop();
 	}

 	return maxHeap.top();
}

// Time complexity: O(n x log₂(k)), where n is v.size()
// Space complexity: O(k), ∵ we need to store ‘K’ smallest numbers in the heap.

/*An Alternate Approach 
  # Alternatively, we can use a Min Heap to find the Kth smallest number. 
  # We can insert all the numbers in the min-heap and then extract the top ‘K’ numbers from the heap to find 
    the Kth smallest number. 
  # Initializing the min-heap with all numbers will take O(N) and extracting ‘K’ numbers will take O(K*logN). 
  # Overall, the time complexity of this algorithm will be O(N + K*log(N)) 
  # and the space complexity will be O(N).
*/
/*PROBLEM STATEMENT: Given an unsorted array of numbers, find the top ‘K’ frequently occurring numbers 
					 in it.
					 Input: [1, 3, 5, 12, 11, 12, 11], K = 2
					 Output: [12, 11]
					 Explanation: Both '11' and '12' apeared twice.
*/

typedef pair<int, int> pii;
vector<int> topKFrequent(vector<int> &v, int k)
{
	if(v.size()<=0)
		return vector<int>();

	unordered_map<int, int> mp;
	for(int i=0; i<v.size(); i++)
		mp[v[i]]++;

	priority_queue<pii, vector<pii>, greater<pii>> minHeap;

	for(auto it=mp.begin(); it!=mp.end(); it++)
	{
		minHeap.push({it->second, it->first});
		
		if(minHeap.size()>k)
			minHeap.pop();
	}

	vector<int> res;
	while(!minHeap.empty())
	{
		res.push_back(minHeap.top().second);
		minHeap.pop();
	}

	return res;
}				

// Time complexity: O(n + (n x log₂(k))) ≡ O(max(n, (n x log₂(k)))), where n is v.size()
// Space complexity: O(n), ∵ we need to store all n elements in the map.	 
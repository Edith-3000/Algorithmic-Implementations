/*PROBLEM STATEMENT: Given n non-negative integers representing an elevation map where the width of each 
                     bar is 1, compute how much water it is able to trap after raining.
  Input: arr[]   = {3, 0, 2, 0, 4}
  Output: 7
  Explanation: We can trap "3 units" of water between 3 and 2,
               "1 unit" on top of bar 2 and "3 units" between 2 and 4.
*/

/*BRUTE FORCE APPROACH ------>
  # The idea is to traverse every array element and find the highest bars on left and right sides. 
  # Take the smaller of two heights. 
  # The difference between the smaller height and height of the current element is the amount of water that 
    can be stored in this array element.
  # Time Complexity: O(n²)
    Space COmplexity: O(1)
*/

=================================================================================================================

/*UNDERLYING CONCEPT ----->
  • Total units of water trapped = ∑(Water trapped on each building).
  • Water trapped on each building w[i] = min(max(v[0]...v[i-1]), max(v[i+1]...v[n-1])) - v[i]
*/

int rainWaterTrap(vector<int> &v)
{
	if(v.size()<=0)
		return 0;

	// mxLeft[i] contains height of tallest bar to the 
    // left of i'th bar including itself 
	vector<int> mxLeft(v.size());

	// mxRight[i] contains height of tallest bar to 
    // the right of ith bar including itself 
	vector<int> mxRight(v.size());

	int mxl=INT_MIN, mxr=INT_MIN;

	// Fill mxLeft[] vector 
	for(int i=0; i<v.size(); i++)
    {
    	mxl=max(mxl, v[i]);
    	mxLeft[i]=mxl;
    }

    // Fill mxRight[] vector 
    for(int i=v.size()-1; i>=0; i--)
    {
    	mxr=max(mxr, v[i]);
    	mxRight[i]=mxr;
    }

    int res=0; // initialise result

    // Calculate the accumulated water element by element 
    // consider the amount of water on i'th bar, the 
    // amount of water accumulated on this particular 
    // bar will be equal to min(mxLeft[i], mxRight[i]) - v[i] . 
    for(int i=0; i<v.size(); i++)
   		res+=min(mxLeft[i], mxRight[i])-v[i];

   	// return the final result
   	return res; 
}

/*# Time Complexity: O(n): Only one traversal of the array is needed, So time Complexity is O(n).
  # Space Complexity: O(n): Two extra vectors are needed each of size n.
*/
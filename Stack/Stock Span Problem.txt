/*PROBLEM STATEMENT: The stock span problem is a financial problem where we have a series of n daily 
                     price quotes for a stock and we need to calculate span of stock’s price for all n 
                     days.
                     The span Sᵢ of the stock’s price on a given day i is defined as the maximum number of
                     consecutive days just before the given day, for which the price of the stock on the current
                     day is less than or equal to its price on the given day.
                     NOTE: Include the current day also for each day.
For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values 
for corresponding 7 days are {1, 1, 1, 2, 1, 4, 6}
*/

vector<int> stockSpan(vector<int> &v)
{
	if(v.size()<=0)
		return v;

	stack<pair<int, int>> st; 
	vector<int> ngl(v.size());

	for(int i=0; i<v.size(); i++)
	{
		if(st.empty())
			ngl[i]=-1;

		else if(st.top().first>v[i])
			ngl[i]=st.top().second;

		else if(st.top().first<=v[i])
		{
			while(!st.empty() && st.top().first<=v[i])
				st.pop();

			if(st.empty())
				ngl[i]=-1;

			else ngl[i]=st.top().second;
		}

		st.push({v[i], i});
	}

	for(int i=0; i<ngl.size(); i++)
		ngl[i]=i-ngl[i];

	// return the final result
	return ngl;
}

/*# Time Complexity: O(n), where n is v.size()
  # Space Complexity: O(n)
*/
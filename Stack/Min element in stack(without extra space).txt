/*PROBLEM STATEMENT: Design a Data Structure SpecialStack that supports all the stack operations like 
					 push(), pop() and an additional operation getMin() which should return minimum element from 
					 the SpecialStack. All these operations of SpecialStack must be O(1). 
					 To implement SpecialStack, you should only use standard Stack data structure and no other data structure like arrays, list, .. etc.
*/

stack<int> st;
int min;

int getMin()
{
	if(st.empty())
		return -1;

	else return min;
}

void push(int n)
{
	if(st.empty())
	{
		st.push(n);
		min=n;
	}

	else
	{
		if(n>=min)
			st.push(n)

		else
		{
			st.push(2*n - min);
			min=n;
		}
	}
}

void pop()
{
	if(st.empty())
		return;

	if(st.top()<min)
		min=2*min - st.top();

	st.pop();
}

int top()
{
	if(st.empty())
		return -1;

	st.top>=min ? return st.top() : min;
}

/*# How does this approach work?
    * When element to be inserted is less than min, we insert “2x – min”. 
    * The important thing to notes is, 2x – min will always be less than x (proved below), i.e., new min 
      and while popping out this element we will see that something unusual has happened as the popped element 
      is less than the minEle. So we will be updating min.

    * How 2*x - minEle is less than x in push()? 
      x < min which means x - min < 0

      // Adding x on both sides
      x - min + x < 0 + x 

	  2*x - min < x 

      ∴ We can conclude 2*x - min < new min 
  ---------------------------------------------------------------------------
  # While popping out, if we find the element(y) less than the current min, we find the 
    new min = 2*min – y.
  # How previous minimum element, prevMin is, 2*min - y ?

    // We pushed y as 2*x - prevMin. Here 
    // prevMin is min before y was inserted
    y = 2*x - prevMin

    // Value of min was made equal to x
    min = x .
    
    new min = 2 * min - y 
            = 2*x - (2*x - prevMin)
            = prevMin // This is what we wanted
*/
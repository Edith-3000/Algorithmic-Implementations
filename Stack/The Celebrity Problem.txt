/*PROBLEM STATEMENT: Suppose you are at a party with n people (labeled from 0 to n - 1) and among them, 
                     there may exist one celebrity. 
                     The definition of a celebrity is that all the other (n - 1) people know him/her but 
                     he/she does not know any of them.
Now you want to find out who the celebrity is or verify that there is not one. 
The only thing you are allowed to do is to ask questions like: "Hi, A. Do you know B?" to get information 
of whether A knows B. 
You need to find out the celebrity (or verify there is not one) by asking as few questions as possible 
(in the asymptotic sense).
You are given a 2 D matrix, v[][] of size (n x n), v[i][j] = 0 if i doesn't know j and v[i][j] = 1, if i
knows j.
# Note: There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there 
is a celebrity in the party. If there is no celebrity, return -1. 
*/

/*UNDERLYING CONCEPT ------->
  # So basically, celebrity is the person who is: • known by everyone
  												  • knows nobody.
  # visit link for more info: https://www.youtube.com/watch?v=CiiXBvrX-5A
*/  

int findCelebrity(vector<vector<int>> &v)
{
	stack<int> st;
	int r=v.size();

	// pushing all the persons in the stack
	for(int i=0; i<r; i++)
		st.push(i);

	while(st.size()>=2)
	{
		// taking out 2 persons at a time
		int i=st.top(); st.pop();
		int j=st.top(); st.pop();

		// if i knows j, then it implies i can't be a celebrity
		// therefore pushed back j
		if(v[i][j]) st.push(j);

		// if i does not knows j, then it implies j can't be a celebrity
		// therefore pushed back i
		else st.push(i);
	}

    // stack top can be the potential celebrity but not guaranteed
	int potCel=st.top();

	for(int i=0; i<r; i++)
	{
		if(i!=potCel)
		{
			if(v[i][potCel]==0 || v[potCel][i]==1)
		    	return -1;
		}
	}

	return potCell;
}	

// TIme Complexity: O(n)
// Space Complexity: O(n), where 'n' are the total #peope in the party.											 
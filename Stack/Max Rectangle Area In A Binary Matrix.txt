/*PROBLEM STATEMENT: Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing 
					 all ones and return its area.
*/

/*UNDERLYING CONCEPT:----->
  # The problem can be easily tackled by making use of "Max Rectangular Area in a Histogram" concept.
  # The rows of the binary matrix are converted into histograms one by one and maxArea is found.
*/

vector<int> nslIndices(vector<int> &v)
{
	vector<int> nsl(v.size());
	stack<pair<int, int>> st;
	int pseudoIndex=-1;

	for(int i=0; i<v.size(); i++)
	{
		if(st.empty())
			nsl[i]=pseudoIndex;

		else if(st.top().first<v[i])
			nsl[i]=st.top().second;

		else
		{
			while(!st.empty() && st.top().first>=v[i])
				st.pop();

			if(st.empty())
				nsl[i]=pseudoIndex;

			else nsl[i]=st.top().second;
		}

		st.push({v[i], i});
	}

	return nsl;
}

vector<int> nsrIndices(vector<int> &v)
{
	vector<int> nsr(v.size());
	stack<pair<int, int>> st;
	inr pseudoIndex=v.size();

	for(int i=v.size()-1; i>=0; i--)
	{
		if(st.empty())
			nsr[i]=pseudoIndex;

		else if(st.top().first<v[i])
			nsr[i]=st.top().second;

		else
		{
			while(!st.empty() && st.top().first>=v[i])
				st.pop();

			if(st.empty())
				nsr[i]=pseudoIndex;

			else nsr[i]=st.top().second;
		}

		st.push({v[i], i});
	}

	return nsr;
}

int maxRectAreaInHist(vector<int> &v)
{
	vector<int> nsl=nslIndices(v);
	vector<int> nsr=nsrIndices(v);

	vector<int> area(v.size());
	
	for(int i=0; i<area.size(); i++)
		area[i]=(nsr[i]-nsl[i]-1)*v[i];

	return *max_element(area.begin(), area.end());
}

int maxRectAreaInBinMatrix(vector<vector<int>> &v)
{
	if(v.size()<=0)
		return -1;
    
    // #rows & columns in binary matrix v[][]
    int r=v.size(), c=v[0].size();
    
    // to store final result
    int res=INT_MIN;
    
    vector<int> hist(v[0]);
    // finding max area of histogram considering the 1st row of v[][]
    res=max(res, maxRectAreaInHist(hist));

    for(int i=1; i<r; i++)
    {
    	for(int j=0; j<c; j++)
    		v[i][j]==1 ? hist[j]+=1 : hist[j]=0;

    	res=max(res, maxRectAreaInHist(hist));
    }

    // return the final result;
    return res;
}

/*# Time Complexity: O(r x c): Only one traversal of the matrix is required.
  # Space Complexity: O(c): Stack is required to store the columns, so so space complexity is O(c)
*/
/*PROBLEM STATEMENT: Find the largest rectangular area possible in a given histogram where the largest 
                     rectangle can be made of a number of contiguous bars. For simplicity, assume that all 
                     bars have same width and the width is 1 unit.
For example, consider the following histogram with 7 bars of heights {6, 2, 5, 4, 5, 1, 6}. The largest 
possible rectangle possible is 12.
*/

// BRUTE FORCE APPROACH: O(nÂ²)

/*One by one consider all bars as starting points and calculate area of all rectangles starting with every 
  bar. Finally return maximum of all possible areas.
*/

=================================================================================================================

// ALTERNATE APPROACH: O(n)

vector<int> nslIndices(vector<int> &v)
{
	vector<int> nsl(v.size());
	stack<pair<int, int>> st;
	int pseudoIndex=-1;

	for(int i=0; i<v.size(); i++)
	{
		if(st.empty())
			nsl[i]=pseudoIndex;

		else if(st.top().first<v[i])
			nsl[i]=st.top().second;

		else
		{
			while(!st.empty() && st.top().first>=v[i])
				st.pop();

			if(st.empty())
				nsl[i]=pseudoIndex;

			else nsl[i]=st.top().second;
		}

		st.push({v[i], i});
	}

	return nsl;
}

vector<int> nsrIndices(vector<int> &v)
{
	vector<int> nsr(v.size());
	stack<pair<int, int>> st;
	int pseudoIndex=v.size();

	for(int i=v.size()-1; i>=0; i--)
	{
		if(st.empty())
			nsr[i]=pseudoIndex;

		else if(st.top().first<v[i])
			nsr[i]=st.top().second;

		else
		{
			while(!st.empty() && st.top().first>=v[i])
				st.pop();

			if(st.empty())
				nsr[i]=pseudoIndex;

			else nsr[i]=st.top().second;
		}

		st.push({v[i], i});
	}

	return nsr;
}

int maxRectAreaInHist(vector<int> &v)
{
	if(v.size()<=0)
		return -1;

	vector<int> nsl=nslIndices(v);
	vector<int> nsr=nsrIndices(v);

	vector<int> area(v.size());
	
	for(int i=0; i<area.size(); i++)
		area[i]=(nsr[i]-nsl[i]-1)*v[i];

	return *max_element(area.begin(), area.end());
}

/*# Time Complexity: O(n), where n is v.size()
  # Space Complexity: O(n)
*/
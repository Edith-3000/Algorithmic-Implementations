//PROBLEM STATEMENT: Construct a full binary tree from a preorder and postorder sequence

/*UNDERLYING CONCEPT --------> 
  # A full binary tree is a tree in which every node has either 0 or 2 children. 
  # The main concept of the below algorithm is -
    * Forming the root from the preorder sequence.
    * Finding out the nodes in the left and right subtree of the root taken using the postorder sequence.
    * And recursivelt do the aboce 2 steps for all elements in the preorder sequence.
    * For more intricacies visit: https://www.techiedelight.com/construct-full-binary-tree-from-preorder-postorder-sequence/
*/

#include<bits/stdc++.h>
using namespace std;

struct Node
{
	int data;
	Node *left, *right;
};

Node* newNode(int key)
{
	Node *n = new Node;
	n->data=key;
	n->left=n->right=nullptr;
	return n;
}

void inOrder(Node *root)
{
	// base condition
	if(root==nullptr)
	   return;
	
	inOrder(root->left);
	cout<<root->data<<" ";
	inOrder(root->right);
}

// A recursive function to construct a full binary tree from given preorder and postorder sequence
Node* buildFullBinaryTreeUtil(auto &preorder, auto &postorder, int &pIndex, int start, int end, auto &mp)
{   
    // Consider the next item from the given preorder sequence
	// This item would be the root node of subtree formed by
	// the postorder[start, end]
	Node *root=newNode(preorder[pIndex]);
	
	// increment pIndex
	pIndex++;
	
	// base condition
	if(pIndex==preorder.size())
	   return root;
	
	// find the index of next key in postorder sequence to determine the
	// boundary of left and right subtree of current root node
	int partition=mp[preorder[pIndex]];
	
	// fill the left and right subtree together
	if(start<=partition && (partition+1)<=(end-1))
	{
		// build the left subtree
		root->left=buildFullBinaryTreeUtil(preorder, postorder, pIndex, start, partition, mp);
		
		// build the right subtree
		root->right=buildFullBinaryTreeUtil(preorder, postorder, pIndex, partition+1, end, mp);
	}
	
	// return the root 
	return root;
}

// Construct a full binary tree from preorder and postorder sequence
Node* buildFullBinaryTree(vector<int> &preorder, vector<int> &postorder)
{   
    // map is used to efficiently find index of any element in given
	// postorder sequence
	unordered_map<int, int> mp;
	for(int i=0; i<postorder.size(); i++)
	   mp[postorder[i]]=i;
	
	// pIndex stores index of next node in the preorder sequence
	int pIndex=0;
	
	// set range [start, end] for subtree formed by postorder sequence
	int start=0, end=preorder.size()-1;
	
	// construct the binary tree and return root
	return buildFullBinaryTreeUtil(preorder, postorder, pIndex, start, end, mp);
}

int main()
{
	vector<int> preorder  = { 1, 2, 4, 5, 3, 6, 8, 9, 7 };
	vector<int> postorder = { 4, 5, 2, 8, 9, 6, 7, 3, 1 };
	
	Node *root=buildFullBinaryTree(preorder, postorder);
	inOrder(root);
}
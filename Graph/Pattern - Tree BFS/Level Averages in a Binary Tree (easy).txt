/*Problem Statement: Given a binary tree, populate an array to represent the averages of all of its 
                     levels.
*/

/*
 * Definition for a binary tree node.
 * struct node {
 *     int val;
 *     node *left;
 *     node *right;
 *     node() : val(0), left(nullptr), right(nullptr) {}
 *     node(int x) : val(x), left(nullptr), right(nullptr) {}
 *     node(int x, node *left, node *right) : val(x), left(left), right(right) {}
 * };
*/

/*UNDERLYING CONCEPT ---->
  This problem follows the Binary Tree Level Order Traversal pattern. We can follow the same BFS approach. 
  The only difference will be that instead of keeping track of all nodes of a level, we will only track
  the running sum of the values of all nodes in each level. In the end, we will append the average of 
  the current level to the result array.
*/

vector<vector<long long>> levelAvgBT(node *root)
{
   //to store the levels averages one by one
   vector<double> res;
    
   if(root==nullptr)
      return res;

   queue<node *> q;
   q.push(root);

   while(!q.empty())
   {
       long long levelSize=q.size();       
       double levelSum=0; //to store the current level sum
       
       for(long long i=0; i<levelSize; i++)
       {
          node *t=q.front();
          q.pop();  
          
          //add the node value to the current levelSum
          levelSum+=(t->val);     
          
          //insert the children of the popped out node in the queue
          if(t->left!=nullptr)
             q.push(t->left);

          if(t->right!=nullptr)
             q.push(t->right);
       }
       
       //add current level average to the result
       res.push_back(levelSum/levelSize);
   }

   return res;
}

/* # Time complexity: O(n), where ‘n’ is the total number of nodes in the tree. 
                      This is due to the fact that we traverse each node once.
   # Space complexity: O(n) as we need to return a list containing the level order traversal. 
                       We also need O(n) space for the queue. 
                       ∵ 𝒘𝒆 𝒄𝒂𝒏 𝒉𝒂𝒗𝒆 𝒂 𝒎𝒂𝒙𝒊𝒎𝒖𝒎 𝒐𝒇 (𝒏/2) 𝒏𝒐𝒅𝒆𝒔 𝒂𝒕 𝒂𝒏𝒚 𝒍𝒆𝒗𝒆𝒍 (𝒕𝒉𝒊𝒔 𝒄𝒐𝒖𝒍𝒅 𝒉𝒂𝒑𝒑𝒆𝒏 𝒐𝒏𝒍𝒚 𝒂𝒕 𝒕𝒉𝒆 
                       𝒍𝒐𝒘𝒆𝒔𝒕 𝒍𝒆𝒗𝒆𝒍), 𝒕𝒉𝒆𝒓𝒆𝒇𝒐𝒓𝒆 𝒘𝒆 𝒘𝒊𝒍𝒍 𝒏𝒆𝒆𝒅 𝑶(𝒏) 𝒔𝒑𝒂𝒄𝒆 𝒕𝒐 𝒔𝒕𝒐𝒓𝒆 𝒕𝒉𝒆𝒎 𝒊𝒏 𝒕𝒉𝒆 𝒒𝒖𝒆𝒖𝒆.
*/
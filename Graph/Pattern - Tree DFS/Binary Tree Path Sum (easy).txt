/*Problem Statement: Given a binary tree and a number ‘S’, find if the tree has a path from root-to-leaf 
                     such that the sum of all the node values of that path equals ‘S’.
*/

/*
 * Definition for a binary tree node.
 * struct node {
 *     int val;
 *     node *left;
 *     node *right;
 *     node() : val(0), left(nullptr), right(nullptr) {}
 *     node(int x) : val(x), left(nullptr), right(nullptr) {}
 *     node(int x, node *left, node *right) : val(x), left(left), right(right) {}
 * };
*/

/*UNDERLYING CONCEPT ----->
  # As we are trying to search for a root-to-leaf path, we can use the Depth First Search (DFS) technique 
    to solve this problem.
  # To recursively traverse a binary tree in a DFS fashion, we can start from the root and at every step, 
    make two recursive calls one for the left and one for the right child.

  # Here are the steps for Binary Tree Path Sum algorithm: ------->
    * Start DFS with the root of the tree.
    * If the current node is not a leaf node, do two things:
      1). Subtract the value of the current node from the given number to get a new sum 
          => S = S - node.value
      2). Make two recursive calls for both the children of the current node with the new number(sum S)
         calculated in the previous step.
    * At every step, see if the current node being visited is a leaf node and if its value is equal to the 
      given number ‘S’. If both these conditions are true, we have found the required root-to-leaf path, therefore return true.
    * If the current node is a leaf but its value is not equal to the given number ‘S’, return false.
*/

bool hasPathSum(node *root, long long sum)
{
	 if(root==nullptr)
	    return false;
    
    //if the current node is a leaf node and it's value = sum, then
    //the required path is found
	  if(root->val==sum && root->left==nullptr && root->right==nullptr)
	     return true;
    
    //recursively call to traverse the left and right sub-tree
    //return true if any of the two recursive calls return true
	  else
	     return (hasPathSum(root->left, sum-root->val) || 
	             hasPathSum(root->right, sum-root->val));
}

/* # Time complexity: O(n), where ‘n’ is the total number of nodes in the tree. 
                      This is due to the fact that we traverse each node once in the worst case.
   # Space complexity: O(n) in the worst case. 
                       This space will be used to store the recursion stack. 
                       The worst case will happen when the given tree is a linked list (i.e., every 
                       node has only one child).
*/
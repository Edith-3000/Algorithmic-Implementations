# Reference: https://cp-algorithms.com/data_structures/disjoint_set_union.html

/********************************************************************************************************/

# 𝑷𝒂𝒕𝒉 𝒄𝒐𝒎𝒑𝒓𝒆𝒔𝒔𝒊𝒐𝒏 𝒐𝒑𝒕𝒊𝒎𝒊𝒛𝒂𝒕𝒊𝒐𝒏
  • This optimization is designed for speeding up find_set().
  • Pseudocode of the optimisation:
    
    int find_set(int v) {
		    // base condition
		    if(parent[v] == -1) return v;

        // otherwise
		    return parent[v] = find_set(parent[v]);
    }

// Time complexity: O(log(n) per call on average.

/********************************************************************************************************/

# 𝑼𝒏𝒊𝒐𝒏 𝒃𝒚 𝒔𝒊𝒛𝒆 / 𝒓𝒂𝒏𝒌
  • This optimization is designed for speeding up union_sets().
  • Pseudocode of the optimisation:

    void make_set(int v) {
        parent[v] = -1;
    	  size[v] = 1;
    }

    void union_sets(int a, int b) {
        int s1 = find_set(a);
    	  int s2 = find_set(b);

    	  if(s1 != s2) {
    	      if(size[s1] < size[s2]) swap(s1, s2);
            parent[s2] = s1;
    		    size[s1] += size[s2];
    	  }
    }
    
    // DSU with union by size / rank, but without path compression works in O(log(n)) time per query.

/********************************************************************************************************/

# 𝑰𝒇 𝒘𝒆 𝒄𝒐𝒎𝒃𝒊𝒏𝒆 𝒃𝒐𝒕𝒉 𝒐𝒑𝒕𝒊𝒎𝒊𝒛𝒂𝒕𝒊𝒐𝒏𝒔 - 𝒑𝒂𝒕𝒉 𝒄𝒐𝒎𝒑𝒓𝒆𝒔𝒔𝒊𝒐𝒏 𝒘𝒊𝒕𝒉 𝒖𝒏𝒊𝒐𝒏 𝒃𝒚 𝒔𝒊𝒛𝒆 / 𝒓𝒂𝒏𝒌 - 𝒘𝒆 𝒘𝒊𝒍𝒍 𝒓𝒆𝒂𝒄𝒉 𝒏𝒆𝒂𝒓𝒍𝒚 
  𝑪𝑶𝑵𝑺𝑻𝑨𝑵𝑻 𝑶(1) 𝒕𝒊𝒎𝒆 𝒒𝒖𝒆𝒓𝒊𝒆𝒔.
// 𝑨𝒏 𝑼𝒏𝒅𝒊𝒓𝒆𝒄𝒕𝒆𝒅 𝑮𝒓𝒂𝒑𝒉(𝑼𝑮) 𝒄𝒐𝒏𝒕𝒂𝒊𝒏𝒔 𝒂 𝒄𝒚𝒄𝒍𝒆 𝒊𝒇 𝒕𝒉𝒆𝒓𝒆 𝒊𝒔 𝑴𝑶𝑹𝑬 𝑻𝑯𝑨𝑵 1 𝒘𝒂𝒚 𝒕𝒐 𝒗𝒊𝒔𝒊𝒕 𝒂 𝒏𝒐𝒅𝒆/𝒗𝒆𝒓𝒕𝒆𝒙.

bool cycleHelper(int src, vector<bool> &visited, int parent)
{
	// marking a node visited as soon as it is pushed in 
    // internal call stack
	visited[src]=true;

	// now there can be 2 cases -
	// 1. either the neighbour of the src vertex is not visited
	//    yet, in such a case recursively visit the neighbours 
	//    check for cycle or
	// 2. the neighbour is visited and != parent(src), (i.e backedge
	//    is present) then the graph contains cycle

	for(auto x: mp[src])
	{
		// case 1
		if(!visited[x])
		{
			// passing the parent of x as src
			bool cycleFound=cycleHelper(x, visited, src);
			if(cycleFound) return true;
		}

		// case 2
		else if(x!=parent) return true;
	}

	// if the above 2 cases fails then no cycle present
	return false;
}

bool containsCycle(int src)
{
    // to check if a vertex isVisited
	vector<bool> visited(n, false);

	// passing the parent of src vertex as -1
	// return the final result
	return cycleHelper(src, visited, -1);
}

// Time Complexity ≡ DFS traversal
// Here n is the number of vertices in the UG.
// m is the graph represented using unordered_map
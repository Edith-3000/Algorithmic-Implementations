/* # A bipartite graph also called a bi-graph, is a set of graph vertices, i.e, points where multiple lines meet,
     decomposed into two 𝒅𝒊𝒔𝒋𝒐𝒊𝒏𝒕 sets, meaning they have no element in common, such that no two graph vertices 
     within the same set are 𝒂𝒅𝒋𝒂𝒄𝒆𝒏𝒕.

   # Adjacent nodes are any two nodes that are connected by an edge.
   # A bipartite graph is a special case of a 𝒌-𝒑𝒂𝒓𝒕𝒊𝒕𝒆 𝒈𝒓𝒂𝒑𝒉 with k = 2.

   # Bipartite graphs are equivalent to 𝒕𝒘𝒐-𝒄𝒐𝒍𝒐𝒓𝒂𝒃𝒍𝒆 𝒈𝒓𝒂𝒑𝒉𝒔 i.e., coloring of the vertices using two colors in
     such a way that vertices of the same color are never adjacent along an edge. 

   # All 𝑨𝒄𝒚𝒄𝒍𝒊𝒄 𝒈𝒓𝒂𝒑𝒉𝒔 are bipartite. 
     • As a tree is an acyclic graph, ∴ Bi-partite.
       To put the vertices of a tree in 2 disjoint sets just put the vertices of the all the levels alternately
       in Set 1 and Set 2, no other possibility exist.

   # A 𝑪𝒚𝒄𝒍𝒊𝒄 graph is bipartite iff all its cycles are of even length. 
   # Some common examples of a bipartite graph include star graphs, grid graphs and gear graphs.

   # Applications of bipartite graphs ⟶
     • Bipartite graph can be used in the medical field in the detection of lung cancer, throat cancer etc.
     • Used in search advertising and e-commerce for similarity ranking.
     • Predict movie preferences of a person.
     • Stable marriage6 and other matching problems.

   # For more info visit: https://www.educative.io/edpresso/what-is-a-bipartite-graph
*/

// USING DFS

void bipartiteHelper(int src, vector<int> &visited, int color, int parent, int &oddCycle)
{
	// marking a node visited as soon as it is pushed in 
    // internal call stack by giving the color passed
	visited[src]=color;

	// go to all the unvisited neighbours of the current
    // vertex, but one by one
	for(auto nbr: m[src])
	{
		if(!visited[nbr])
		{
			// passing the parent of src as src, color as (3-color)
			// and checking recursively
			bipartiteHelper(nbr, visited, 3-color, src, oddCycle);
		}

		else if(nbr!=parent && color=visited[nbr])
		{
			// backedge and odd length cycle present
			oddCycle=1;
		}
	}
}

bool isBipartite(src)
{
	// initially assuming that the graph has
	// no odd length cycle
	bool oddCycle=0;

	// visited[i] can take 3 values -
	// 0 if vertex is not visited yet
	// 1 if vertex is visited and colored with color 1
	// 2 if vertex is visited and colored with color 2
	// initially no vertex is visited
	vector<int> visited(n, 0);

	// oddCycle must be passed by-reference
	// passing the parent of src vertex as -1
	// color to src as 1
	bipartiteHelper(src, visited, 1, -1, oddCycle);

	if(oddCycle) return true;
	else return false;
}

// Time Complexity ≡ DFS traversal
// Here n is the number of vertices in the UG.
// m is the graph represented using unordered_map

====================================================================================================================

// USING BFS
// Here the graph has been represented using Adjacency Matrix ☺☺☺

#include <iostream> 
#include <queue> 
#define V 4 

using namespace std; 

// This function returns true if graph 
// G[V][V] is Bipartite, else false 
bool isBipartite(int G[][V], int src) 
{ 
	// Create a color array to store colors 
	// assigned to all veritces. Vertex 
	// number is used as index in this array. 
	// The value '0' of colorArr[i] 
	// is used to indicate that no color 
	// is assigned to vertex 'i'(i.e. not visited
	// yet. The value 1 is used to indicate first color 
	// is assigned and value 2 indicates 
	// second color is assigned. 
	int colorArr[V]; 
	for (int i = 0; i < V; ++i) 
		colorArr[i] = 0; 

	// Assign first color to source 
	colorArr[src] = 1; 

	// Create a queue (FIFO) of vertex 
	// numbers and enqueue source vertex 
	// for BFS traversal 
	queue <int> q; 
	q.push(src); 

	// Run while there are vertices 
	// in queue (Similar to BFS) 
	while (!q.empty()) 
	{ 
		// Dequeue a vertex from queue 
		int u = q.front(); 
		q.pop(); 

		// Return false if there is a self-loop 
		if (G[u][u] == 1) 
		return false; 

		// Find all non-colored adjacent vertices 
		for (int v = 0; v < V; ++v) 
		{ 
			// An edge from u to v exists and 
			// destination v is not colored 
			if (G[u][v] && colorArr[v] == 0) 
			{ 
				// Assign alternate color to this adjacent v of u 
				colorArr[v] = 3 - colorArr[u]; 
				q.push(v); 
			} 

			// An edge from u to v exists and destination 
			// v is colored with same color as u 
			else if (G[u][v] && colorArr[v] == colorArr[u]) 
				return false; 
		} 
	} 

	// If we reach here, then all adjacent 
	// vertices can be colored with alternate color 
	return true; 
} 

//Program to test above function 
int main() 
{ 
	int G[][V] = {{0, 1, 0, 1}, 
				 {1, 0, 1, 0}, 
				 {0, 1, 0, 1}, 
				 {1, 0, 1, 0}}; 

	isBipartite(G, 0) ? cout << "Yes, the graph is Bipartite" : cout << "No, the graph is not Bipartite"; 
	return 0; 
} 

// Time Complexity ≡ BFS traversal
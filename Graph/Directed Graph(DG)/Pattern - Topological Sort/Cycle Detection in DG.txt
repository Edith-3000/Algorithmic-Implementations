// PROBLEM STATEMENT: Find if a given Directed Graph has a cycle in it or not.

===================================================================================================================

// 𝑼𝑺𝑰𝑵𝑮 𝑩𝑭𝑺 

/*UNDERLYING CONCEPT ------>
  # If we can’t determine the topological ordering of all the vertices of a directed graph, the graph
    has a cycle in it i.e. for a directed cyclic graph : res.size()!=vertices (refer BFS implementation
    in "Topological Sort Algo.txt")
*/

===================================================================================================================

// 𝑼𝑺𝑰𝑵𝑮 𝑫𝑭𝑺

/* USEFUL TIPs ⟶
   # 𝑨𝒏 𝑼𝒏𝒅𝒊𝒓𝒆𝒄𝒕𝒆𝒅 𝑮𝒓𝒂𝒑𝒉(𝑼𝑮) 𝒄𝒐𝒏𝒕𝒂𝒊𝒏𝒔 𝒂 𝒄𝒚𝒄𝒍𝒆 𝒊𝒇 𝒕𝒉𝒆𝒓𝒆 𝒊𝒔 𝑴𝑶𝑹𝑬 𝑻𝑯𝑨𝑵 1 𝒘𝒂𝒚 𝒕𝒐 𝒗𝒊𝒔𝒊𝒕 𝒂 𝒏𝒐𝒅𝒆/𝒗𝒆𝒓𝒕𝒆𝒙, but the same
     is not the case with 𝑫𝒊𝒓𝒆𝒄𝒕𝒆𝒅 𝑮𝒓𝒂𝒑𝒉(𝑫𝑮), for eg. consider the following DG: 1 ----> 2
     																			  1 ----> 3
     																			  2 ----> 3
     • in this graph there are 2 ways to visit vertex 3:
       1). from 1 to 3
       2). from 1 to 2 to 3

       But it does not contain a cycle.
   # ∴ the same algo used in "Cycle Detection in UG using DFS.txt" can't be used.
   # 𝑨 𝑩𝑨𝑪𝑲𝑬𝑫𝑮𝑬 𝑰𝑺 𝑨𝑵 𝑬𝑫𝑮𝑬 𝑭𝑹𝑶𝑴 𝑨 𝑮𝑰𝑽𝑬𝑵 𝑵𝑶𝑫𝑬 𝑻𝑶 𝑨𝑵 𝑨𝑵𝑪𝑬𝑺𝑻𝑶𝑹 𝑶𝑭 𝑻𝑯𝑨𝑻 𝑵𝑶𝑫𝑬 𝑰𝑵 𝑻𝑯𝑬 𝑺𝑨𝑴𝑬 𝑷𝑨𝑻𝑯 𝑰𝑵 𝑨 𝑫𝑮.
   # So to check cycle in a DG we maintain a 𝒔𝒕𝒂𝒄𝒌 𝑨𝑹𝑹𝑨𝒀(it is also a bool array) in addition to the visited array.
     • As we know visited[] array basically keeps a check abput whether a given vertex has already been visited
       at some poit of time or not.
     • But here the extra data structure used which is the stack array (remember it is an array only, only the name
       name stack is used to convey the message that it will work almost similar to stack, but in order to have 
       a constant lookup time for a vertex an array is used in place of stack).
     • The stack[i] will be true for a vertex 'i' if the vertex is 𝒂 𝒑𝒂𝒓𝒕 𝒐𝒇 𝒕𝒉𝒆 𝒄𝒖𝒓𝒓𝒆𝒏𝒕 𝒑𝒂𝒕𝒉.
*/

bool cycleHelper(int src, vector<bool> &visited, vector<bool> &stack)
{
	//marking a node visited as soon as it is pushed in 
    //internal call stack
	visited[src]=true;

	// the src now becomes a part of the current path
	stack[src]=true;

	// go to all the unvisited nodes of the current src
    // node, but one by one

    // now there can be 2 cases -
    // 1. either the neighbour of the src vertex is not visited
	//    yet, in such a case recursively visit the neighbours and
	//    check for cycle or
	// 2. the neighbour is visited and is also a part of the current path,
	//    then the graph contains cycle
	for(auto x: mp[src])
	{
		// case 1
		if(!visited[x])
		{
			bool cycleFound=cycleHelper(x, visited, stack);
			if(cycleFound) return true;
		}

		// case 2
		else if(stack[x]) return true;
	}

	// removing the current vertex i.e. src from the current path
	// when recursion moves in backward direction
	stack[src]=false;

	// if the above 2 cases fails then no cycle present
	return false;
}

bool containsCycle()
{
	vector<bool> visited(n, false);
	vector<bool> stack(n, false);
	
	// initially assuming that no cycle is present
	bool res=false;
	
	// check if cycle exists by iterating through 
	// all the vertices
	for(auto p: mp)
	{
		if(!visited[p.first]){
			bool temp=cycleHelper(p.first, visited, stack);
			res=res||temp;
		}
	}
	
	// return the final result
	return res;
}

/* # Why in the containsCycle fⁿ cycleHelper fⁿ is called for all the vertices(unvisited)?
     • This is because there might be a possibility that by calling containsCycle() for a single
       vertex, that DFS traversal might not traverse all the vertices in DG, for eg. take the case
       of the graph: with 4 vertices from 0 to 3 & 5 edges as follows- 1 ----> 2
																	   1 ----> 0
																	   2 ----> 3
																	   3 ----> 1
																	   3 ----> 0
	 • Here in this case if we perform DFS traversal only for once, say taking the src vertex as 0,
	   then it will give result as "No Cycle Present", but in reality cycle is present.
	 • ∴ we perform DFS from all the vertices, using a loop in the containsCycle() fⁿ.
*/

// Time Complexity ≡ DFS traversal
// Here n is the number of vertices in the UG.
// mp is the graph represented using unordered_map
/* PROBLEM STATEMENT: Topological Sort of a directed graph (a graph with unidirectional edges) is a 
                      linear ordering of its vertices such that for every directed edge (U, V) from vertex U 
                      to vertex V, U comes before V in the ordering.
					  Given a directed graph, find the topological ordering of its vertices.
					  Eg. Input: Vertices=5, Edges=[4, 2], [4, 3], [2, 0], [2, 1], [3, 1]
						  Output: Following are all valid topological sorts for the given graph:
						          1) 4, 2, 3, 0, 1
						          2) 4, 3, 2, 0, 1
						          3) 4, 3, 2, 1, 0
						          4) 4, 2, 3, 1, 0
						          5) 4, 2, 0, 3, 1
*/

// USING BFS

/*UNDERLYING CONCEPT ------>
  # The basic idea behind the topological sort is to provide a partial ordering among the vertices of the
    graph such that if there is an edge from U to V then U≤V i.e., U comes before V in the ordering. 
    Here are a few fundamental concepts related to topological sort:

	* Source: Any node that has no incoming edge and has only outgoing edges is called a source.
	* Sink: Any node that has only incoming edges and no outgoing edge is called a sink.

  # So, we can say that a topological ordering starts with one of the sources and ends at one of the sinks.

  # 𝑨 𝒕𝒐𝒑𝒐𝒍𝒐𝒈𝒊𝒄𝒂𝒍 𝒐𝒓𝒅𝒆𝒓𝒊𝒏𝒈 𝒊𝒔 𝒑𝒐𝒔𝒔𝒊𝒃𝒍𝒆 𝒐𝒏𝒍𝒚 𝒘𝒉𝒆𝒏 𝒕𝒉𝒆 𝒈𝒓𝒂𝒑𝒉 𝒉𝒂𝒔 𝒏𝒐 𝒅𝒊𝒓𝒆𝒄𝒕𝒆𝒅 𝒄𝒚𝒄𝒍𝒆𝒔, 𝒊.𝒆. 𝒊𝒇 𝒕𝒉𝒆 𝒈𝒓𝒂𝒑𝒉 𝒊𝒔 
    𝒂 𝑫𝒊𝒓𝒆𝒄𝒕𝒆𝒅 𝑨𝒄𝒚𝒄𝒍𝒊𝒄 𝑮𝒓𝒂𝒑𝒉 (𝑫𝑨𝑮). 
    If the graph has a cycle, some vertices will have cyclic dependencies which makes it impossible to find 
    a linear ordering among vertices.

  # To find the topological sort of a graph we can traverse the graph in a Breadth First Search (BFS) way. 
    We will start with all the sources, and in a stepwise fashion, save all sources to a sorted list. 
    We will then remove all sources and their edges from the graph. After the removal of the edges, we will have new sources, so we will repeat the above process until all vertices are visited.

  # Algorithmic steps --------->
    a. 𝑰𝒏𝒊𝒕𝒊𝒂𝒍𝒊𝒛𝒂𝒕𝒊𝒐𝒏
 	   1. We will store the graph in Adjacency Lists, which means each parent vertex will have a list 
 	      containing all of its children. We will do this using a HashMap where the ‘key’ will be the 
 	      parent vertex number and the value will be a List containing children vertices.
	   2. To find the sources, we will keep a HashMap to count the in-degrees i.e., count of incoming edges 
	      of each vertex. Any vertex with ‘0’ in-degree will be a source.
	
	b. 𝑩𝒖𝒊𝒍𝒅 𝒕𝒉𝒆 𝒈𝒓𝒂𝒑𝒉 𝒂𝒏𝒅 𝒇𝒊𝒏𝒅 𝒊𝒏-𝒅𝒆𝒈𝒓𝒆𝒆𝒔 𝒐𝒇 𝒂𝒍𝒍 𝒗𝒆𝒓𝒕𝒊𝒄𝒆𝒔
	   We will build the graph from the input and populate the in-degrees HashMap.

	c. 𝑭𝒊𝒏𝒅 𝒂𝒍𝒍 𝒔𝒐𝒖𝒓𝒄𝒆𝒔
	   All vertices with ‘0’ in-degrees will be our sources and we will store them in a Queue.

	d. 𝑺𝒐𝒓𝒕
	   For each source, do the following things:
	   1. Add it to the sorted list.
	   2. Get all of its children from the graph.
	   3. Decrement the in-degree of each child by 1.
	   4. If a child’s in-degree becomes ‘0’, add it to the sources Queue.
	   5. Repeat step 1, until the source Queue is empty.
*/

#include<iostream>
#include<vector>
#include<unordered_map>
#include<queue>
using namespace std;

class TopologicalSort
{
	public:
		static vector<int> sort(int vertices, const vector<vector<int>> &edges)
		{
			if(vertices<=0)
				return vector<int>();
				
			vector<int> res; // to store the final result

			// a. Initialize the graph 
			unordered_map<int, int> inDegree; // count of incoming edges for every vertex
			unordered_map<int, vector<int>> graph; // adjacency list graph
			for(int i=0; i<vertices; i++)
			{
				inDegree[i]=0;
				graph[i]=vector<int>();
			}
			
			// b. build the graph
			for(int i=0; i<edges.size(); i++)
			{
				int parent=edges[i][0], child=edges[i][1];
				graph[parent].push_back(child); // put the child into it's parent's list
				inDegree[child]++; // increment child's inDegree
			}
			
			// c. Find all sources i.e., all vertices with 0 in-degrees
			queue<int> q;
			for(auto entry: inDegree)
			{
				if(entry.second==0)
					q.push(entry.first);
			}
			
			// d. For each source, add it to the res and subtract one from all of its childrens'
			// in-degrees if a child's in-degree becomes zero, add it to the sources queue
			while(!q.empty())
			{
				int vertex=q.front();
				res.push_back(vertex);
				q.pop();
				vector<int> children=graph[vertex]; // get the node's children to decrement their in-degrees
				for(auto child: children)
				{
					inDegree[child]--;
					if(inDegree[child]==0)
						q.push(child);
				}
			}
			
			// topological sort is not possible if the graph has a cycle
			if(res.size()!=vertices)
				return vector<int>();
				
			return res; // return final result
		}
};

int main(int argc, char *argv[])
{
	vector<int> result=TopologicalSort::sort(7, vector<vector<int>>{vector<int>{6, 4}, vector<int>{6, 2}, vector<int>{5, 3},
	                                            					vector<int>{5, 4}, vector<int>{3, 0}, vector<int>{3, 1},
	                                            					vector<int>{3, 2}, vector<int>{4, 1}});	
	                                            					
	for(auto x: result)
	   cout<<x<<" ";                   		
}

// Time Complexity: O(|V|+|E|)
// Space Complexity: O(|V|+|E|)

======================================================================================================================================

// USING DFS
// 𝑵𝑶𝑻𝑬: 𝑰𝒏 𝒐𝒓𝒅𝒆𝒓 𝒕𝒐 𝒖𝒔𝒆 𝒕𝒉𝒆 𝑫𝑭𝑺 𝒎𝒆𝒕𝒉𝒐𝒅 𝒇𝒐𝒓 𝑻𝒐𝒑𝒐𝒍𝒐𝒈𝒊𝒂𝒍 𝑶𝒓𝒅𝒆𝒓𝒊𝒏𝒈, 𝒇𝒊𝒓𝒔𝒕 𝒎𝒂𝒌𝒆 𝒔𝒖𝒓𝒆 𝒕𝒉𝒂𝒕 𝒕𝒉𝒆 𝒈𝒓𝒂𝒑𝒉 𝒉𝒂𝒔 𝒏𝒐 
//        𝒅𝒊𝒓𝒆𝒄𝒕𝒆𝒅 𝒄𝒚𝒄𝒍𝒆𝒔 𝒂𝒕 𝒂𝒍𝒍. 𝑯𝒐𝒘𝒆𝒗𝒆𝒓, 𝒊𝒏 𝒐𝒓𝒅𝒆𝒓 𝒕𝒐 𝒂𝒗𝒐𝒊𝒅 𝒄𝒉𝒆𝒄𝒌𝒊𝒏𝒈 𝒑𝒓𝒆𝒔𝒆𝒏𝒄𝒆 𝒐𝒇 𝒄𝒚𝒄𝒍𝒆 𝒖𝒔𝒆 𝒕𝒉𝒆 𝒂𝒃𝒐𝒗𝒆 𝑩𝑭𝑺 𝒎𝒆𝒕𝒉𝒐𝒅.
//        𝑩𝒖𝒕 𝒆𝒗𝒆𝒏 𝒊𝒇 𝒚𝒐𝒖 𝒘𝒂𝒏𝒕 𝒕𝒐 𝒖𝒔𝒆 𝑫𝑭𝑺 𝒐𝒏𝒍𝒚 (𝒆𝒗𝒆𝒏 𝒕𝒉𝒐𝒖𝒈𝒉 𝒕𝒉𝒆 𝒈𝒓𝒂𝒑𝒉 𝒉𝒂𝒔 𝒅𝒊𝒓𝒆𝒄𝒕𝒆𝒅 𝒄𝒚𝒄𝒍𝒆𝒔) 𝒕𝒉𝒆𝒏 𝒖𝒔𝒆 𝒕𝒉𝒆 𝑫𝑭𝑺 
//        𝒎𝒆𝒕𝒉𝒐𝒅 𝒂𝒔 𝒖𝒔𝒆𝒅 𝒊𝒏 "𝑷𝒓𝒐𝒃𝒍𝒆𝒎 - 1 (𝑩𝒂𝒔𝒆𝒅 𝒐𝒏 𝑻𝒐𝒑𝒐𝒍𝒐𝒈𝒊𝒄𝒂𝒍 𝑺𝒐𝒓𝒕).𝒄𝒑𝒑" 𝒇𝒊𝒍𝒆.

void dfsHelper(int src, map<int, bool> &visited, list<int> &res)
{
	visited[src]=true;

	// go to all the unvisited nodes of the current
    // node, but one by one
	for(auto nbr: mp[src])
	{
		if(!visited[nbr])
			dfsHelper(nbr, visited, res);
	}

	// in the last push the src in the FRONT of the list
	// to resolve all the dependencies
	res.push_front(src);
	return;
}

list<int> topoSort()
{
	map<int, bool> visited;

	// mark all the vertices as not visited 
	// in the beginning
	for(auto p: mp)
		visited[p.first]=false;

	// to store the topological ordering
	list<int> res;

	// dfs function is to be called for all vertices in 
	// directed graphs in order to include all vertices 
	// in the final topological ordering(see the graph below
	// to understand why?)
	for(auto p: mp)
	{
		int vertex=p.first;
		if(!visited[vertex])
			dfsHelper(vertex, visited, res);
	}

	// return the topological ordering at last
	return res;
}

/* Why the dfsHelper fⁿ is needed to be called for ALL the vertices?
   • Because it will not include all the vertices in some directed graphs cases such as given below ⟶
     Following are the vertices in the graph: 0 ------> 2
     										  1 ------> 2
     										  1 ------> 4
     										  2 ------> 5
     										  4 ------> 5
*/

// Time Complexity: O(|V|+|E|)
/*PROBLEM STATEMENT: Given an array Arr of non-negative integers of size N. The task is to find the 
                     maximum possible xor between two numbers present in the array.
                     Example: Input: Arr = {25, 10, 2, 8, 5, 3}
                              Output: 28
		                      The maximum result is 5 ^ 25 = 28
*/

/*UNDERLYING CONCEPT:
  # Naive Approach: A Simple Solution is to generate all pairs of the given array and compute XOR of the 
    pairs. Finally, return maximum XOR value. This solution takes O(N²) time.
  # An efficient approach can be used by yhe help of Trie
*/

#include<bits/stdc++.h>
using namespace std;

class Node
{
	public: 
	 Node *left; //for 0
	 Node *right; //for 1
};

class Trie
{
	Node *root;
	
	public:
	 //constructor
	 Trie(): root(new Node()) {}
	 
	 void insert(int n)
	 {
	 	Node *temp=root;
	 	//assuming to be 32 bit integers
	 	for(int i=31; i>=0; i--)
	 	{
	 		int bit=(n>>i) & 1;
	 		if(bit==0)
	 		{
	 			if(temp->left==nullptr)
	 			   temp->left=new Node(); //create a new Node
	 			
	 			//move temp to the left Node
	 			temp=temp->left;
	 		}
	 		
	 		else //when bit==1
	 		{
	 			if(temp->right==nullptr)
	 			   temp->right=new Node(); //create a new Node
	 			   
	 			//move temp to the right Node
	 			temp=temp->right;
	 		}
	 	}
	 }
	
	int maxXorUtil(int n)
	{
		Node *temp=root;
		int curr_ans=0; //to store the max XOR which number n can form with
		                //any number present in trie
		for(int i=31; i>=0; i--)
		{
			//finding whether the ith bit is set or not
			int bit=(n>>i) & 1;
			if(bit==0)
			{
				//check for complementary of 0 i.e. 1 
				//as it will increment our answer
				if(temp->right!=nullptr)
			    {
			    	//include it in curr_ans
			    	curr_ans+=(1<<i);
			    	temp=temp->right;
			    }
			    else temp=temp->left;
			}
			
			else //if bit==1
			{
				//check for complementary of 1 i.e. 0 
				//as it will increment our answer
				if(temp->left!=nullptr)
			    {
			    	//include it in curr_ans
			    	curr_ans+=(1<<i);
			    	temp=temp->left;
			    }
			    else temp=temp->right;
			}
		}
		
		//return answer
		return curr_ans;
	}
	
	int maxXor(vector<int> &v)
	{
		int maxXor=0; //to store final result
		for(int i=0; i<v.size(); i++)
		{
			int n=v[i];
			insert(n);
			int curr_ans=maxXorUtil(n);
			maxXor=max(maxXor, curr_ans);
		}
		
		//return the max XOR possible
		return maxXor;
	}
};

int main()
{
	vector<int> v{3, 10, 5, 25, 2, 8};
	Trie t;
	cout<<t.maxXor(v);
}

//Time Complexity: O(n), where n is v.size() 
//Time complexity is not O(n * log(m)) where, m is the max number present in the vector,
//∵ we are taking here only 32 bits to represent an integer
/* Problem Statement: Given an array of ‘K’ sorted LinkedLists, merge them into one sorted list.
*/

/*UNDERLYING CONCEPT ------>
  # A brute force solution could be to add all elements of the given ‘K’ lists to one list and sort it.
  # If there are a total of ‘N’ elements in all the input lists, then the brute force solution will have a 
    time complexity of O(N*log₂N) as we will need to sort the merged list. 
  # A better approach can be followed by utilizing 𝒕𝒉𝒆 𝒇𝒂𝒄𝒕 𝒕𝒉𝒂𝒕 𝒕𝒉𝒆 𝒊𝒏𝒑𝒖𝒕 𝒍𝒊𝒔𝒕𝒔 𝒂𝒓𝒆 𝒊𝒏𝒅𝒊𝒗𝒊𝒅𝒖𝒂𝒍𝒍𝒚 𝒔𝒐𝒓𝒕𝒆𝒅.

  # If we have to find the smallest element of all the input lists, we have to compare 𝒐𝒏𝒍𝒚 𝒕𝒉𝒆 𝒔𝒎𝒂𝒍𝒍𝒆𝒔𝒕 
    (𝒊.𝒆. 𝒕𝒉𝒆 𝒇𝒊𝒓𝒔𝒕) 𝒆𝒍𝒆𝒎𝒆𝒏𝒕 𝒐𝒇 𝒂𝒍𝒍 𝒕𝒉𝒆 𝒍𝒊𝒔𝒕𝒔. 
  # Once we have the smallest element, we can put it in the merged list. 
  # Following a similar pattern, we can then find the next smallest element of all the lists to add it to 
    the merged list.

  # 𝑻𝑯𝑬 𝑩𝑬𝑺𝑻 𝑫𝑨𝑻𝑨 𝑺𝑻𝑹𝑼𝑪𝑻𝑼𝑹𝑬 𝑻𝑯𝑨𝑻 𝑪𝑶𝑴𝑬𝑺 𝑻𝑶 𝑴𝑰𝑵𝑫 𝑻𝑶 𝑭𝑰𝑵𝑫 𝑻𝑯𝑬 𝑺𝑴𝑨𝑳𝑳𝑬𝑺𝑻 𝑵𝑼𝑴𝑩𝑬𝑹 𝑹𝑬𝑷𝑬𝑨𝑻𝑬𝑫𝑳𝒀 
    𝑨𝑴𝑶𝑵𝑮 𝑨 𝑺𝑬𝑻 𝑶𝑭 ‘𝑲’ 𝑵𝑼𝑴𝑩𝑬𝑹𝑺 𝑰𝑺 𝑨 𝑯𝑬𝑨𝑷. 

  # Let’s see how can we use a heap to find a better algorithm.
    * We can insert the first element of each array in a Min Heap.
    * After this, we can take out the smallest (top) element from the heap and add it to the merged 
      list.
    * After removing the smallest element from the heap, we can insert the next element of the 𝒔𝒂𝒎𝒆 list 
      into the heap.
    * We can repeat steps 2 and 3 to populate the merged list in sorted order.
*/

/*
 * Definition for singly-linked list.
 * struct node {
 *     int val;
 *     node *next;
 *     node() : val(0), next(nullptr) {}
 *     node(int x) : val(x), next(nullptr) {}
 *     node(int x, Node *next) : val(x), next(next) {}
 * };
 */

node* mergeKSortedLists(vector<node *> &v)
{
    struct comparator
    {
       bool operator()(const node *x, const node *y)
       {
          return x->val > y->val;
       }
    };

	  priority_queue<node *, vector<node *>, comparator> minHeap;
	
    //push the root of each list in minHeap
	  for(auto root: v)
	  {
	     if(root!=nullptr)
	        minHeap.push(root);
	  }
    
    //initialising the head and tail(for easy insertion) of
    //the resultant final list
    node *resHead=nullptr, *resTail=nullptr;
 
    //take the smallest(top) element from the minHeap and add
    //it to the result, if the top element has next element 
    //present then add it to the minHeap 
	  while(!minHeap.empty())
	  {
	     node *t= minHeap.top();
	     minHeap.pop();

	     if(resHead==nullptr)
	        resHead=resTail=t;

	     else
	     {
	        resTail->next=t;
	        resTail=resTail->next;
	     }

	     if(t->next!=nullptr)
	        minHeap.push(t->next);
	  }

	  return resHead;
}

/* # v[] is a vector of pointers containing pointers to node data type.
   # Since we’ll be going through all the elements of all arrays and will be removing/adding one element 
     to the heap in each step, the time complexity of the above algorithm will be O(N*logK), where ‘N’ is 
     the total number of elements in all the ‘K’ input arrays.
   # Space complexity: The space complexity will be O(K) because, at any time, our min-heap will be 
                       storing one number from all the ‘K’ input arrays.
*/
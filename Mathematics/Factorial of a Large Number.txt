int multiply(int x, vector<int> &v, int res_size)
{
	int carry=0, prod;

	for(int i=0; i<=res_size-1; i++)
	{
	   prod=x*v[i] + carry;
	   v[i]=prod%10; //store last digit of 'prod' in v[]  
	   carry=prod/10; //put rest of the digits of prod in carry
	}

	while(carry) //put remaining digits of carry in v[]
	{
	   v[res_size]=carry%10;
	   carry/=10;
	   res_size++;
	}

	return res_size;
}

void factorial(int n)
{
	if(n<0) return; //factorial of -ve nos. is undefined

	vector<int> v(100000, 0); //change size of vector acc. to the requirements
	                        //v stores the current factorial & eventually final result
    v[0]=1; //initialize result
    int res_size=1; //it stores the length of the current factorial
                   //and eventually stores the #digits in the ans

    for(int x=2; x<=n; x++)
       res_size=multiply(x, v, res_size);

    for(int i=res_size-1; i>=0; i--) cout<<v[i];   
}
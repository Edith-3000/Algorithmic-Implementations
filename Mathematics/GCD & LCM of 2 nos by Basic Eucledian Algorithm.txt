//RECURSIVE IMPLEMENTATION

long long gcd_by_basic_euclid(long long a, long long b)
{
	//base condition
	if(a==0) return b;
	return gcd_by_basic_euclid(b%a, a);
}

//ITERATIVE IMPLEMENTATION

long long gcd_by_basic_euclid(long long a, long long b)
{
	while(a)
	{
	   b%=a;
	   long long temp=a; //swapping a & b
       a=b;
       b=temp;
	}
}

long long lcm_by_basic_euclid(long long a, long long b)
{
	long long g=gcd_by_basic_euclid(a, b); //calculating gcd
	return (a/g)*b; //since lcm*gcd=a*b
	                //to avoid overflow
}


/*Worst case of Basic Euclidean Algorith: when a and b are 2 consecutive fibonacci nos.
  Time Complexity in worst case: O(log(max(a,b) to the base 2))

  Best case of Basic Euclidean Algorith: when a%b==0 or b%a==0
  Time Complexity in best case: O(1)
*/ 
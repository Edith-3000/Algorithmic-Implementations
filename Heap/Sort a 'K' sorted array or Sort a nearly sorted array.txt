/*PROBLEM STATEMENT: Given an array of n elements, where each element is at most k away from its 
					 target position, devise an algorithm that sorts in O(n log k) time. 
					 For example, let us consider k is 2, an element at index 7 in the sorted array, can be 
					 at indexes 5, 6, 7, 8, 9 in the given array.
					 Input : arr[] = {6, 5, 3, 2, 8, 10, 9} and k = 3             
					 Output : arr[] = {2, 3, 5, 6, 8, 9, 10}
*/

void sortNearlySortedArr(vector<int> &v, int k)
{
	if(v.size()==0)
		return;

	// using min heap 
	priority_queue<int, vector<int>, greater<int>> minHeap;
    
    int pos=0;
	for(int i=0; i<v.size(); i++)
	{
		minHeap.push(v[i]);
		if(minHeap.size()>k)
		{
			v[pos++]=minHeap.top();
			minHeap.pop();
		}
	}

	while(!minHeap.empty())
	{
		v[pos++]=minHeap.top();
		minHeap.pop();
	}
}
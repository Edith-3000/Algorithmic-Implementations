/*PROBLEM STATEMENT: Given an array arr[] and a value x, find the k closest elements to x in arr[].
					 Return  answer in the form of a vector.
					 Input: k = 4, x = 35
       				 arr[] = {12, 16, 22, 30, 35, 39, 42, 45, 48, 50, 53, 55, 56}
					 Output: 30 39 42 45
*/

vector<int> kClosestElements(vector<int> &v, int k)
{
	if(v.size()==0)
		return vector<int>();

	priority_queue<pair<int, int>> maxHeap;

	for(int i=0; i<v.size(); i++)
	{
		maxHeap.push({abs(v[i]-x), v[i]});
		if(maxHeap.size()>k)
			maxHeap.pop();
	}

	vector<int> res;
	while(!maxHeap.empty())
	{
		res.push_back(maxHeap.top().second);
		maxHeap.pop();
	}

	return res;
}				

// Time complexity: O(n x log₂(k))
// Space complexity: O(k), ∵ we need to store atmost ‘k’ pairs in the heap.
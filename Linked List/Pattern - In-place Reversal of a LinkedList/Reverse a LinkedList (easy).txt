/*Problem Statement: Given the head of a Singly LinkedList, reverse the LinkedList. Write a function 
                     to return the new head of the reversed LinkedList.
*/

/*
 * Definition for singly-linked list.
 * struct node {
 *     int val;
 *     node *next;
 *     node() : val(0), next(nullptr) {}
 *     node(int x) : val(x), next(nullptr) {}
 *     node(int x, Node *next) : val(x), next(next) {}
 * };
 */

 node* reverseList(node* head) 
 {
    if(!head || !head->next)
       return head;

    node *p=head; //node that we will be processing
    node *prev=nullptr; //previous node that we have processed

    while(p!=nullptr)
    {
       //to temporarily store the node next to p
       node *next=p->next;

       //reverse the current node
       p->next=prev;

       //before moving to the next node, point previous to the current node
       prev=p;

       //move to the next node
       p=next;
    }
    
    //after the loop, p will be pointing to 'null' & prev will be the next head
    return prev;
 }

 /*Time complexity: O(n), where ‘n’ is the total number of nodes in the LinkedList.
   Space complexity: O(1).
*/
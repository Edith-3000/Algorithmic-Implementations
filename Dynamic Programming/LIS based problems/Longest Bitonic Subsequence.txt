/*PROBLEM: Given an array arr[0...(n-1)] containing n integers, a subsequence of arr[] is called 
           Bitonic if it is first increasing, then decreasing. Write a function that takes an array 
           as argument and returns the length of the longest bitonic subsequence.
           NOTE: A sequence, sorted in increasing order is considered Bitonic with the decreasing part 
           as empty. Similarly, decreasing order sequence is considered Bitonic with the increasing part 
           as empty.
*/

/*UNDERLYING CONCEPT -----> 
  # This problem is a variation of standard Longest Increasing Subsequence (LIS) problem.
  # We need to construct two arrays lis[] and lds[] using Dynamic Programming solution of LIS problem. 
  # lis[i] stores the length of the Longest Increasing subsequence 𝑬𝒏𝒅𝒊𝒏𝒈 with arr[i]. 
  # lds[i] stores the length of the longest Decreasing subsequence 𝑺𝒕𝒂𝒓𝒕𝒊𝒏𝒈 from arr[i]. 
  # Finally, we need to return the max value of (lis[i] + lds[i] – 1) where i is from 0 to n-1.

  # For example, consider sequence [4, 2, 5, 9, 7, 6, 10, 3, 1]. The contents of LIS and LDS array are

             |lis[i] |lds[i] |
    (i = 0)  |   1   |   3   |
    (i = 1)  |   1   |   2   |
    (i = 2)  |   2   |   3   |
    (i = 3)  |   3   |   5   |
    (i = 4)  |   3   |   4   |
    (i = 5)  |   3   |   3   |
    (i = 6)  |   4   |   3   |
    (i = 7)  |   2   |   3   |
    (i = 8)  |   1   |   1   |

    Longest Bitonic Subsequence length is 7 [4, 5, 9, 7, 6, 3, 1]
    Longest Bitonic Subsequence is formed by (lis[3] + lds[3] - 1)
*/

long long lbsLength(vector<long long> &v, long long n)
{
	//initialisation of dp matrices lis[] & lds[]
	//longest increasing subsequence 𝙚𝙣𝙙𝙞𝙣𝙜 𝙬𝙞𝙩𝙝 𝙫[0] has length 1
	lis[0]=1;
    
    //longest decreasing subsequence s𝒕𝒂𝒓𝒕𝒊𝒏𝒈 𝙬𝙞𝙩𝙝 𝙫[n-1] has length 1
	lds[n-1]=1;

    //choice diagram iterative code 
    //for lis[]
	//start from second element in the vector v[]
	for (long long i=1; i<n; i++)
	{
		//do for each element in subarray/subvector v[0...(i-1)]
		for(long long j = 0; j<i; j++)
		{
			//find longest increasing subsequence that ends with v[j]
			//where v[j] is less than the current element v[i]
			if (v[i]>v[j] && lis[i]<lis[j])
			   lis[i]=lis[j];
		}

		//include v[i] in LIS, ∵ for each i we are finding lisLength
		//𝙬𝙝𝙞𝙘𝙝 𝙚𝙣𝙙𝙨 𝙬𝙞𝙩𝙝 𝙫[𝙞]
		lis[i]++;
	}
    
    //for lds[]
	//start from second last element in the vector v[]
	for (long long i=(n-2); i>=0; i--)
	{
		//do for each element in subarray/subvector v[(i+1)....(n-1)]
		for(long long j = (n-1); j>i; j--)
		{
			//find longest decreasing subsequence that starts with v[j]
			//where v[j] is less than the current element v[i]
			if (v[i]>v[j] && lds[i]<lds[j])
			   lds[i]=lds[j];
		}

		//include v[i] in LDS, ∵ for each i we are finding ldsLength
		//𝙬𝙝𝙞𝙘𝙝 𝒔𝒕𝒂𝒓𝒕𝒔 𝙬𝙞𝙩𝙝 𝙫[𝙞]
		lds[i]++;
	}

   //find the maximum value of lis[i] + lds[i] - 1
   long long mx = lis[0]+lds[0]-1; 
   for (long long i=1; i<n; i++) 
      mx=max(mx, lis[i]+lds[i]-1);

    //return the final answer calculated
	return mx;
}

 /*# n is v.size() 
   # Time Complexity: O(n²)
   # Auxiliary Space: O(n).
*/
/*PROBLEM: The Longest Increasing Subsequence (LIS) problem is to find the length of the longest 
           subsequence of a given sequence such that all elements of the subsequence are sorted in 
           increasing order(i.e. monotically increasing subsequence). For example, the length of LIS 
           for {10, 22, 9, 33, 21, 50, 41, 60, 80} is 6 and LIS is {10, 22, 33, 50, 60, 80}.
*/

//RECURSIVE IMPLEMENTATION Version 1

long long lisLengthRecur(vector<long long> &v, long long n, long long prev)
{
	//base condition(s)
	//if nothing is remaining lisLength=0
	if(n==0)
	   return 0;

	//choice diagram code
	/*for each element of v[], we have 2 choices ->
	  Choice 1: exclude the current element and process the
	            remaining elements
	  Choice 2: include the current element if it is 𝙨𝙢𝙖𝙡𝙡𝙚𝙧
	            than prev element in LIS
	*/

	//for choice 1
	//exclude indicates the lisLength if curr_element excluded
	long long exclude= lisLengthRecur(v, n-1, prev);

	//for choice 2
	//include indicates the lisLength if curr_element included
	long long include=0;
	if(v[n-1]<prev)
	   include= 1 + lisLengthRecur(v, n-1, v[n-1]);
    
    //return maximum of above two choices
	return max(exclude, include);
}

/* # n is v.size()
   # prev is initialised with LLONG_MAX in the main() fⁿ
   # Time Complexity: The time complexity of this recursive approach is exponential(O(2ⁿ)) as there 
                      is a case of overlapping subproblems.
   # Auxiliary Space: O(1). No external space used for storing values apart from the internal 
                            stack space.
*/

-------------------------------------------------------------------------------------------------

//RECURSIVE IMPLEMENTATION Version 2

/*NOTE: Version 1 and Version 2 are almost similar, the only difference b/w them lies in
        the fact that in Version 1 the i/p size is made smaller by processiong elements from
        RHS of v[], whereas the same is achieved in Version 2 processiong elements from LHS
        of v[].
        So there are only slight modifications.
*/

long long lisLengthRecur(vector<long long> &v, long long i, long long n, long long prev)
{
	//base condition(s)
	//if nothing is remaining lisLength=0
	if (i==n)
		return 0;

	//choice diagram code
	/*for each element of v[], we have 2 choices ->
	  Choice 1: exclude the current element and process the
	            remaining elements
	  Choice 2: include the current element if it is 𝙜𝙧𝙚𝙖𝙩𝙚𝙧 
	            than prev element in LIS
	*/

	//for choice 1
	//exclude indicates the lisLength if curr_element excluded
	long long exclude = lisLengthRecur(v, i+1, n, prev);

	//for choice 2
	//include indicates the lisLength if curr_element included
	long long include = 0;
	if (v[i] > prev)
		include = 1 + lisLengthRecur(v, i+1, n, v[i]);

	//return maximum of above two choices
	return max(include, exclude);
}

/* # n is v.size()
   # i is initialised with 0, as we start processiong from LHS of v[] 
   # prev is initialised with LLONG_MIN in the main() fⁿ
   # Time Complexity: The time complexity of this recursive approach is exponential(O(2ⁿ)) as there 
                      is a case of overlapping subproblems.
   # Auxiliary Space: O(1). No external space used for storing values apart from the internal 
                            stack space.
*/

***************************************************************************************************************

//MEMOIZED IMPLEMENTATION





***************************************************************************************************************

//TABULATION IMPLEMENTATION (Real DP ;))

long long lisLengthTabu(vector<long long> &v, long long n)
{
	//initialisation of dp matrix 
	//longest increasing subsequence 𝙚𝙣𝙙𝙞𝙣𝙜 𝙬𝙞𝙩𝙝 𝙫[0] has length 1
	dp[0]=1;
    
    //choice diagram iterative code 
	//start from second element in the vector v[]
	for (long long i=1; i<n; i++)
	{
		//do for each element in subarray/subvector v[0...(i-1)]
		for(long long j = 0; j<i; j++)
		{
			//find longest increasing subsequence that ends with v[j]
			//where v[j] is less than the current element v[i]
			if (v[i]>v[j] && dp[i]<dp[j])
			   dp[i]=dp[j];
		}

		//include v[i] in LIS, ∵ for each i we are finding lisLength
		//𝙬𝙝𝙞𝙘𝙝 𝙚𝙣𝙙𝙨 𝙬𝙞𝙩𝙝 𝙫[𝙞]
		dp[i]++;
	}

	/*find longest increasing subsequence length among all the lengths 
	  of lis {that ends with v[i], for each 0<=i<=(n-1)} calculated & 
	  stored in dp[]*/
	long long lis = LLONG_MIN;
	for(long long i=0; i<n; i++)
		lis=max(lis, dp[i]);

    //return the final answer calculated
	return lis;
}

/* # dp[] is a 1 D global matrix or vector of size (n) to store sub-problem solution.
     dp[i] for each 0<=i<=(n-1) stores the length of the longest increasing subsequence 
     of subarray/subvector v[0...i] 𝙬𝙝𝙞𝙘𝙝 𝙚𝙣𝙙𝙨 𝙬𝙞𝙩𝙝 𝙫[𝙞].
   # n is v.size() 
   # Time Complexity: O(n²)
   # Auxiliary Space: O(n).
*/ 

****************************************************************************************************************

//NON DP IMPLEMENTATION (in O(n*log₂(n)))

/*Underlying concept: 
  # Let s[] be a vector & s[i] be defined as the smallest integer that ends an increasing sequence of 
    length (i+1). Now iterate through every integer of the input set v[] and do the following: --->
    ● If x is more than the last element in s, then append x to the end of s. This essentially means we 
      have found a new largest LIS.
    ● Otherwise find the smallest element in s, which is more than or equal to x, and replace it with x.
      Because s is sorted at any time, the element can be found using binary search in log₂(n)time.
  # Let’s illustrate this with the help of an example. Consider below array of integers –>
    {2, 6, 3, 4, 1, 2, 9, 5, 8}
    Below are the steps followed by the algorithm –
    Initialize to an empty set S = {}
    Inserting 2 —- S = {2} – New largest LIS
    Inserting 6 —- S = {2, 6} – New largest LIS
    Inserting 3 —- S = {2, 3} – Replaced 6 with 3
    Inserting 4 —- S = {2, 3, 4} – New largest LIS
    Inserting 1 —- S = {1, 3, 4} – Replaced 2 with 1
    Inserting 2 —- S = {1, 2, 4} – Replaced 3 with 2
    Inserting 9 —- S = {1, 2, 4, 9} – New largest LIS
    Inserting 5 —- S = {1, 2, 4, 5} – Replaced 9 with 5
    Inserting 8 —- S = {1, 2, 4, 5, 8} – New largest LIS

    So, the length of the LIS is 5 (the size of s[]). Please note that here s[i] is defined as the smallest integer that ends an increasing sequence of length (i+1). Therefore, S does not represent an actual sequence but the size of s[] represents the length of the LIS.
*/

/*Some extra points ----->
  Q. Difference between front(), back() and begin, end() function for std::vector ?
  A. begin() and end() function return an iterator(like a pointer) initialized to the first or 
     the last element of the container that can be used to iterate through the collection, while 
     front() and back() function just return a reference to the first or the last element of the 
     container.
*/

long long lisLength(vector<long long> &v)
{
    //size of i/p array
	long long n=v.size();
    
    //when i/p is empty
    if(n==0) 
       return 0;

	vector<long long> s;
	s.push_back(v[0]);

	for(long long i=1; i<n; i++)
	{
	   if(s.back()<v[i])
	      s.push_back(v[i]);

	   else
	   {
	      //here lower_bound works exactly same as binary_search
	      long long index= lower_bound(s.begin(), s.end(), v[i]) - s.begin();
	      s[index]=v[i];
	   }
	}

	return s.size();
}

/* # Time Complexity: O(n*log₂(n)) [assuming we need to perform binary search for each element].
   # Space Complexity(worst case): O(n).
           Worst case: when v[] is already sorted in increasing order i.e. v[] itself as a whole
                       is the LIS.
*/

****************************************************************************************************************

//IMPLEMENTATION BY MAKING USE OF LCS CONCEPT

# LIS can be reduced to LCS. All we need to do is sort the copy of the original sequence, remove all 
  the duplicates and do LCS of them. In pseudocode it is:
  
  LIS(s):
     t = sort(s)
     t = removeDuplicates(t)
     return LCS(s, t)
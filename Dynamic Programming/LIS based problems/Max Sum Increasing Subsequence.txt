/*PROBLEM: Given an array of n integers. Write a program to find the sum of maximum sum 
           subsequence of the given array such that the integers in the subsequence are sorted in 
           increasing order. For example, if input is {1, 101, 2, 3, 100, 4, 5}, then output should 
           be 106 (1 + 2 + 3 + 100), if the input array is {3, 4, 5, 10}, then output should be 22 
           (3 + 4 + 5 + 10) and if the input array is {10, 5, 4, 3}, then output should be 10.
*/

long long msis(vector<long long> &v, long long n)
{
	//initialisation of dp matrix 
	//sum of increasing subsequence 𝙚𝙣𝙙𝙞𝙣𝙜 𝙬𝙞𝙩𝙝 𝙫[0] is v[0] only
	dp[0]=v[0];
    
    //choice diagram iterative code 
	//start from second element in the vector v[]
	for (long long i=1; i<n; i++)
	{
		//do for each element in subarray/subvector v[0...(i-1)]
		for(long long j = 0; j<i; j++)
		{
			//find increasing subsequence that ends with v[j]
			//where v[j] is less than the current element v[i]
			if(v[i]>v[j] && dp[i]<dp[j])
			   dp[i]=dp[j];
		}

		/*include v[i] in the sum, ∵ for each i we are finding sum of 
		  increasing subsequence 𝙬𝙝𝙞𝙘𝙝 𝙚𝙣𝙙𝙨 𝙬𝙞𝙩𝙝 𝙫[𝙞], ∴ v[i] is to be
		  included in the sum i.e. dp[i]*/
		dp[i]+=v[i];
	}

	/*find max increasing subsequence sum among all the sums
	  of increasing subsequences {that ends with v[i], for each 
	  0<=i<=(n-1)} calculated & stored in dp[]*/
	long long res = LLONG_MIN;
	for(long long i=0; i<n; i++)
		res=max(res, dp[i]);

    //return the final answer calculated
	return res;
}

/* # dp[] is a 1 D global matrix or vector of size (n) to store sub-problem solution.
     dp[i] for each 0<=i<=(n-1) stores the maximum sum of increasing subsequence 
     of subarray/subvector v[0...i] 𝙬𝙝𝙞𝙘𝙝 𝙚𝙣𝙙𝙨 𝙬𝙞𝙩𝙝 𝙫[𝙞].
   # n is v.size() 
   # Time Complexity: O(n²)
   # Auxiliary Space: O(n).
*/ 
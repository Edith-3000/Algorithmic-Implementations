/*PROBLEM: Given a string, a partitioning of the string is a palindrome partitioning 
           if every substring of the partition is a palindrome. For example, 
           “aba|b|bbabb|a|b|aba” is a palindrome partitioning of “ababbbabbababa”. Determine
           the fewest cuts needed for a palindrome partitioning of a given string. For 
           example, minimum of 3 cuts are needed for “ababbbabbababa”. The three cuts are “a|babbbab|b|ababa”. If a string is a palindrome, then minimum 0 cuts are needed. 
           If a string of length n containing all different characters, then minimum n-1 cuts 
           are needed.

           eg. String =  ababbbabbababa
               Palindrome partitioning = a|babbbab|b|ababa
               Min #cuts required = 3
*/

 //RECURSIVE IMPLEMENTATION

bool isPalindrome(string s, long long i, long long j)
{
	while(i<=j)
	{
	   if(s[i]==s[j]) { i++; j--; }
	   else return false;
	}

	return true;
}

long long minPalinPartitionsRecur(string s, long long i, long long j)
{
	//base condition(s)
	/*if(i>j ⇒ s="" is empty)
	  if(i==j ⇒ s has only 1 element)*/
	if(i>=j) 
	   return 0;
	if(isPalindrome(s, i, j)) //no cuts are required if string is already a palindrome
	   return 0;

	long long res=INT_MAX; //to store final result
    
    //choice diagram code
    /*place parenthesis at different places by help of the suitable
      "k loop scheme" between first and last indices, recursively
       calculate min #palindrome partitions for each parenthesis  
       placement and return the  minimum count*/
    for(long long k=i; k<=(j-1); k++)
	{
	   /*1 palindrome partition is required to cut the string into the partitions
	     (i to k) and (k+1 to j)*/ 
	   long long temp= minPalinPartitionsRecur(v, i, k) +
	                   minPalinPartitionsRecur(v, k+1, j) + 1;
	   //update res
	   if(temp<res)
	      res=temp;
	}

	return res;
}

//i is initialised as 0
//j is initialised as s.length()-1
//Time complexity of the above naive recursive approach is exponential.

**********************************************************************************************************

//MEMOIZED IMPLEMENTATION

bool isPalindrome(string s, long long i, long long j)
{
	while(i<=j)
	{
	   if(s[i]==s[j]) { i++; j--; }
	   else return false;
	}

	return true;
}

long long minPalinPartitionsMemo(string s, long long i, long long j)
{
	//base condition(s)
	/*if(i>j ⇒ s="" is empty)
	  if(i==j ⇒ s has only 1 element)*/
	if(i>=j) 
	   return 0;
	if(isPalindrome(s, i, j)) //no cuts are required if string is already a palindrome
	   return 0;
    
    //check if already calculated or not
    if(dp[i][j]!=-1) return dp[i][j];

	long long res=INT_MAX; //to store final result
    
    //choice diagram code
    /*place parenthesis at different places by help of the suitable
      "k loop scheme" between first and last indices, recursively
       calculate min #palindrome partitions for each parenthesis  
       placement and return the  minimum count*/
    for(long long k=i; k<=(j-1); k++)
	{
	   /*1 palindrome partition is required to cut the string into the partitions
	     (i to k) and (k+1 to j)*/ 
	   long long temp= minPalinPartitionsMemo(v, i, k) +
	                   minPalinPartitionsMemo(v, k+1, j) + 1;
	   
	   //update res
	   if(temp<res)
	      res=temp;
	}

	return dp[i][j]=res;
}

//i is initialised as 0
//j is initialised as s.length()-1
/*dp[][] is a 2 D global matrix/vector of vectors, with size (s.length())*(s.length()) 
  and initialized with -1, memset(dp, -1, sizeof(dp));
  It's dimensions are [s.length()] × [s.length()], as max values of the changing parameters
  i.e. i and j can be s.length()-1
*/

**********************************************************************************************************

//OPTIMIZED MEMOIZED IMPLEMENTATION

bool isPalindrome(string s, long long i, long long j)
{
	while(i<=j)
	{
	   if(s[i]==s[j]) { i++; j--; }
	   else return false;
	}

	return true;
}

long long minPalinPartitionsMemo(string s, long long i, long long j)
{
	//base condition(s)
	/*if(i>j ⇒ s="" is empty)
	  if(i==j ⇒ s has only 1 element)*/
	if(i>=j) 
	   return 0;
	if(isPalindrome(s, i, j)) //no cuts are required if string is already a palindrome
	   return 0;
    
    //check if already calculated or not
    if(dp[i][j]!=-1) return dp[i][j];

	long long res=INT_MAX; //to store final result
    
    //choice diagram code
    /*place parenthesis at different places by help of the suitable
      "k loop scheme" between first and last indices, recursively
       calculate min #palindrome partitions for each parenthesis  
       placement and return the  minimum count*/
    for(long long k=i; k<=(j-1); k++)
	{
	   /*1 palindrome partition is required to cut the string into the partitions
	     (i to k) and (k+1 to j)*/ 
       long long left, right;
       
       //if left cut is found already 
       if(dp[i][k]!=-1) left=dp[i][k];
       else 
       {
          left=minPalinPartitionsMemo(v, i, k);
          dp[i][k]=left;
       }
       
       //if right cut is found already 
       if(dp[k+1][j]!=-1) right=dp[k+1][j];
       else 
       {
          right=minPalinPartitionsMemo(v, k+1, j);
          dp[k+1][j]=right;
       }
	   
	   long long temp=left + right + 1;
	   
	   //update res
	   if(temp<res)
	      res=temp;
	}

	return dp[i][j]=res;
}

//i is initialised as 0
//j is initialised as s.length()-1
/*dp[][] is a 2 D global matrix/vector of vectors, with size (s.length())*(s.length()) 
  and initialized with -1, memset(dp, -1, sizeof(dp));
  It's dimensions are [s.length()] × [s.length()], as max values of the changing parameters
  i.e. i and j can be s.length()-1
*/
//Time Complexity: O(n²)
//Space Complexity: O(n²), where n is s.length()

**********************************************************************************************************

//TABULATION IMPLEMENTATION (Real DP ;))

/* eg dp[][] and p[][] matrix of dimensions 4 × 4 ---->
                       
        dp[][]            
               j →
          0    1    2    3
        ---------------------
      0 |  0 |    |    |    |  
        |----|----|----|----|⏎(Lₛₜᵣ=4)(diagonal)  
    i 1 |Inv |  0 |    | Res|
    ↓   |----|----|----|----|⏎(Lₛₜᵣ=3)(diagonal)  
      2 |Inv |Inv | 0  |    |
        |----|----|----|----|⏎(Lₛₜᵣ=2)(diagonal)  
      3 |Inv |Inv |Inv | 0  |
        |----|----|----|----|
                             ⏎(Lₛₜᵣ=1)(diagonal) 
 *Inv = Invalid 

        
        p[][]             
               j →
          0    1    2    3
        ---------------------
      0 |  T |    |    |    |  
        |----|----|----|----|⏎(Lₛₜᵣ=4)(diagonal)  
    i 1 |Inv |  T |    | Res|
    ↓   |----|----|----|----|⏎(Lₛₜᵣ=3)(diagonal)  
      2 |Inv |Inv | T  |    |
        |----|----|----|----|⏎(Lₛₜᵣ=2)(diagonal)  
      3 |Inv |Inv |Inv | T  |
        |----|----|----|----|
                             ⏎(Lₛₜᵣ=1)(diagonal) 
*Inv = Invalid 

*/

long long minPalinPartitionsTabu(string s)
{
	//get the length of the string 
	long long n=s.length();

	/* Create two arrays to build the solution in bottom up manner  
    dp[i][j] = Minimum number of cuts needed for  palindrome partitioning  
               of substring str[i..j]  
    p[i][j] = true if substring str[i..j] is  
              palindrome, else false  
    Note that dp[i][j] = 0 if p[i][j] is true */
	vector<vector<long long>> dp(n, vector<long long>(n)); //dp matrix
	vector<vector<bool>> p(n, vector<bool>(n)); //isPalindrome matrix

	//initialisation of dp matrix
	/*The lower Δˡʳ matrix is not initialised as in that part (i>j),
      which is an invalid case i.e. s.length()=0*/
    //Every string of length 1 is a palindrome 
    for(long long i=0; i<n; i++)
    {
       dp[i][i]=0;
       p[i][i]=true;
    }

    //choice diagram code iterative version
    /*L is string length. Build the solution in bottom up manner by  
      considering all strings of length starting from 2 to n. 
      The loop structure is same as MCM algorithm*/   
    for(long long L=2; L<=n; L++)
    {
       //For string of length L, set different possible starting indices (i)
       for(long long i=0; i<(n-L+1); i++)
       {
          long long j=i+L-1; //∵ L=j-i+1, j is the ending index for corresponding i
          
          //firstly check if the s[i...j] isPalindrome or not 
          /*If L is 2, then we just need to compare two characters. Else 
            need to check two corner characters and value of p[i+1][j-1]*/ 
          if(L==2)
             p[i][j]=(s[i]==s[j]);
          else //when L>2
             p[i][j]= (s[i]==s[j]) && p[i+1][j-1]; 
          
          //now calculate min #cuts required for s[i...j]
          if(p[i][j]==true) //if s[i..j] isPalindrome, then 0 cuts required 
             dp[i][j]=0; 
          else   //when s[i...j] is not palindrome
          {
             dp[i][j]=LLONG_MAX; //to store final result for s[i....j]
             for(long long k=i; k<=(j-1); k++)
             {
                /*make a cut at every possible location starting from i to j,
                  and get the minimum cuts required for s[i....j]*/ 
                long long temp=dp[i][k] + dp[k+1][j] + 1;
                if(temp<dp[i][j])
                dp[i][j]=temp;
             }
          }
       }
    }

    //Return the min cut value for complete string. i.e., s[0...(n-1)] 
    return dp[0][n-1];
}

//Time Complexity: O(n³)
//Space Complexity: O(n²)   

**********************************************************************************************************

//OPTIMIZED TABULATION IMPLEMENTATION (Real DP ;))


/*PROBLEM: Given a value N, if we want to make change for N cents, and we have infinite
           supply of each of S = { S1, S2, .. , Sm} valued coins, how many unique ways
           can we make the change? The order of coins doesnâ€™t matter.
* Above problem is similar to unbounded knapsack with slight variation (concept of Count
  of subsets with given sum can be used).
*/

long long coinChangeMaxNoOfWays(vector<long long> &coin, long long N, long long n)
{
	//initialisation of dp matrix
	for(long long i=0; i<(n+1); i++) dp[i][0]=1;
	for(long long j=1; j<(N+1); j++) dp[0][j]=0;

	//choice diagram code iterative version
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(N+1); j++)
	   {
	      if(coin[i-1]<=j)
	         dp[i][j]=dp[i][j-coin[i-1]] + dp[i-1][j]);
	                      
	      else //when coin[i-1]>w
	         dp[i][j]=dp[i-1][j];
	   }
	}

	return dp[n][N];
}

//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(N+1), where n is the size 
//of coin[] and N is the coin value which is to be changed.
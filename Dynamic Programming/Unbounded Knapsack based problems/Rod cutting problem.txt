/*PROBLEM: Given a rod of length n inches and an array of prices that contains prices of
           all pieces of size smaller than n. Determine the maximum value obtainable by 
           cutting up the rod and selling the pieces. For example, if length of the rod 
           is 8 and the values of different pieces are given as following, then the maximum
           obtainable value is 22 (by cutting in two pieces of lengths 2 and 6).
           length   | 1   2   3   4   5   6   7   8  
           -----------------------------------------
           price    | 1   5   8   9   10  17  17  20
*/

/*Above problem is very much similar to unbounded knapsack proble.
  Here wt array is replaced by length array,
       val array is replaced by price array. 
*/

long long rodCuttingProblem(vector<long long> &len, vector<long long> &price, long long N, long long n)
{
	//initialisation of dp matrix
	for(long long i=0; i<(n+1); i++) dp[i][0]=0;
	for(long long j=0; j<(N+1); j++) dp[0][j]=0;

	//choice diagram code iterative version
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(w+1); j++)
	   {
	      if(len[i-1]<=j)
	         dp[i][j]=max(price[i-1] + dp[i][j-wt[i-1]], dp[i-1][j]);
	                      
	      else //when len[i-1]>N
	         dp[i][j]=dp[i-1][j];
	   }
	}

	return dp[n][N];
}

//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(N+1), where n is the size 
//of len[] & price[] array, N is the length of original Rod.
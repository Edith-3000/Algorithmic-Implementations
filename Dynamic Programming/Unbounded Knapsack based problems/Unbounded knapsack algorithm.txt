//RECURSIVE IMPLEMENTATION

long long unboundedKnapsackRecur(vector<long long> &wt, vector<long long> &val, long long w, long long n)
{
	//base condition
	if(n==0 || w==0) return 0;

	//choice diagram code
	if(wt[n-1]<=w)
	   return max(val[n-1] + unboundedKnapsack(wt, val, w-wt[n-1], n),
	              unboundedKnapsack(wt, val, w, n-1));

	else //when wt[n-1]>w
	   return unboundedKnapsack(wt, val, w, n-1); 
}

*******************************************************************************************************

//MEMOIZED IMPLEMENTATION

long long unboundedKnapsackMemoized(vector<long long> &wt, vector<long long> &val, long long w, long long n)
{
	//base condition
	if(n==0 || w==0) return 0;

    //check if already calculated or not
    if(dp[n][w]!=-1) return dp[n][w];

	//choice diagram code
	if(wt[n-1]<=w)
	   return dp[n][w]=max(val[n-1] + unboundedKnapsack(wt, val, w-wt[n-1], n),
	                                  unboundedKnapsack(wt, val, w, n-1));

	else //when wt[n-1]>w
	   return dp[n][w]=unboundedKnapsack(wt, val, w, n-1); 
}

//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(w+1) and initialized with -1, memset(dp, -1, sizeof(dp));

*******************************************************************************************************

//TABULATION IMPLEMENTATION (Real DP ;))

long long unboundedKnapsackTabu(vector<long long> &wt, vector<long long> &val, long long w, long long n)
{
	//initialisation of dp matrix
	for(long long i=0; i<(n+1); i++) dp[i][0]=0;
	for(long long j=0; j<(w+1); j++) dp[0][j]=0;

	//choice diagram code iterative version
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(w+1); j++)
	   {
	      if(wt[i-1]<=j)
	         dp[i][j]=max(val[i-1] + dp[i][j-wt[i-1]], dp[i-1][j]);
	                      
	      else //when wt[i-1]>w
	         dp[i][j]=dp[i-1][j];
	   }
	}

	return dp[n][w];
}

//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(w+1), where n is the size 
//of wt[] & val[] array.
/*PROBLEM: Given a value V, if we want to make change for V cents, and we have infinite 
           supply of each of C = { C1, C2, .. , Cm} valued coins, what is the minimum 
           number of coins to make the change?
*/

/*CAUTION: The initialisation part of this algorithm is slightly different from others,
                                 V+1 ---->
            -------------------------------------------------------
            |             <------∞(infinite)----->                 |
            |------------------------------------------------------|	
            |    |  <------∞ or (j/coin[0] iff j%coin[0]==0---->   |
      (n+1) |  ^ |-------------------------------------------------|
        |   |  | |                                                 |
        |   |  | |                                                 |
        ˅   |  0 |                                                 |
            |  | |                                                 |
            |  | |                                                 |
            |  ˅ |                                                 |
            |    |                                                 |
            |    |                                                 |
            --------------------------------------------------------
*/

long long minNoOfCoins(vector<long long> &coin, long long &v)
{
	//initialisation of dp matrix

	/*here LLONG_MAX-1 represents ∞
	  1 is subtracted so as to avoid                                                   
	  overflow when 1 will be added to LLONG_MAX-1*/                                
	for(long long j=0; j<(v+1); j++) dp[0][j]=LLONG_MAX-1; 
	for(long long i=1; i<(n+1); i++) dp[i][0]=0; //0 coins required for v==0
	for(long long j=1; j<(v+1); j++)
	{
	   if(j%coin[0]==0)
	      dp[1][j]=j/coin[0];
	   else
	      dp[1][j]=LLONG_MAX-1;
	}

	//choice diagram code iterative version
	for(long long i=2; i<(n+1); i++)
	{
	   for(long long j=1; j<(v+1); j++)
	   {
	      if(coin[i-1]<=j)
	         dp[i][j]=min(1 + dp[i][j-coin[i-1]], dp[i-1][j]);
          
          else //when coin[i-1]>j
             dp[i][j]=dp[i-1][j];
	   }
	}

	return dp[n][v];
}

//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(v+1), where n is the size 
//of coin[] and v is the given coin value.
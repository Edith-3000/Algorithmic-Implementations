/*PROBLEM: Given two strings S1 and S2 of equal length, the task is to determine if S2 is a 
           scrambled form of S1.

           Scrambled string:
           Given string str, we can represent it as a binary tree by partitioning it to two non-empty substrings recursively.
           # Note: Srambled string is not same as an Anagram
           Below is one possible representation of str = “coder”:

                                    coder
                                   /    \
                                  co    der
                                 / \    /  \
                                c   o  d   er
                                           / \
                                          e   r
           To scramble the string, we may choose any non-leaf node and swap its two children.
           Suppose, we choose the node "co" and swap its two children, it produces a scrambled 
           string "ocder". 0 or more swappings are allowed.

                                    ocder
                                   /    \
                                  oc    der
                                 / \    /  \
                                o   c  d   er
                                           / \
                                          e   r
           Thus, “ocder” is a scrambled string of “coder”.

           Similarly, if we continue to swap the children of nodes “der” and “er”, it produces a scrambled string “ocred”.

                                    ocred
                                   /    \
                                  oc    red
                                 / \    /  \
                                o   c  re  d
                                       / \
                                      r   e
           Thus, “ocred” is a scrambled string of “coder”.
*/

//RECURSIVE IMPLEMENTATION

/*Underlying concept: 
  # In order to obtain scrambled string s2 from s1, we divide s1 at every character, so if
    s1.length()=n, then we check for (n-1) times using iterator i.
  # i goes from 1 ----> (n-1), ∴ loop runs for (n-1)-1+1=(n-1) times.
  # for every iᵗʰ iteration:
    • for the string s1[0....(n-1)] to be a scrambled string of s2
      there are only 2 possibilities.
      Case 1). if the child of s1 which are strings s1ₗ[0...(i-1)] and s1ᵣ[i...(n-1)]
               were swapped, then just find out if -->
               s1ₗ[0...(i-1)] is scrambled string of s2ᵣ[(n-i)...(n-1)] 
                                      &&
               s1ᵣ[i...(n-1)] is scrambled string of s2ₗ[0...(n-i-1)] 
               * s1ₗ = s1(left)
                 s1ᵣ = s2(right), similarly for s2

      Case 2). if the child of s1 which are strings s1ₗ[0...(i-1)] and s1ᵣ[i...(n-1)]
               were NOT swapped, then just find out if -->
               s1ₗ[0...(i-1)] is scrambled string of s2ₗ[0...(i-1)] 
                                      &&
               s1ᵣ[i...(n-1)] is scrambled string of s2ᵣ[i...(n-1)] 

      Now if(Case_1==true || Case_2==true) 
             s1 ans s2 are scrambled strings;               
      
 * NOTE:# All the comparisons are to be done Recursively 
        # if s2 is scrambled string of s1, then s1 is also scrambled string of s2 & vice versa.
*/

bool isScrambleRecur(string s1, string s2)
{
   long long n=s1.length(), m=s2.length();

   //base condition(s)
   //strings of non-equal length cant' be scramble strings
   if(n!=m)
      return false;
   //empty strings are scramble strings 
   else if(n==0 && m==0)
      return true;
   //equal strings are scramble strings 
   else if(s1.compare(s2)==0)
      return true;
   //if n<=1 and s1!=s2, then strings are not scrambled
   else if(n<=1)
      return false;

  //choice diagram code
  bool flag=false; //to return final result, initially assuming that strings
                  //are not scrambled
  for(long long i=1; i<=(n-1); i++)
  {
     /*Case 1.) check if s1[0...(i-1)] is a scrambled string of s2[(n-i)....(n-1)] 
                and s1[i....(n-1)] is a scramble string of s2[0....(n-i-1)] 
                OR
      Case 2.)  check if s1[0...(i-1)] is a scrambled string of s2[0....(i-1)] 
                and s1[i....(n-1)] is a scramble string of s2[i....(n-1)] 
     */ 
     if((isScramble(s1.substr(0, i), s2.substr(n-i, i)) &&   //
         isScramble(s1.substr(i, n-i), s2.substr(0, n-i)))  // CASE 1
                           ||
        (isScramble(s1.substr(0, i), s2.substr(0, i)) &&       //
         isScramble(s1.substr(i, n-i), s2.substr(i, n-i))));  // CASE 2
     {
        //if found at any iteration that strings are scrambled break the loop
        flag=true;
        break;
     }
  }
  
  //return final result
  return flag;
}

//Time complexity of the above naive recursive approach is exponential.
//this algorithm can also be implemented by choosing extreme indices i and j and 
  "k for loop scheme".

*********************************************************************************************************

//MEMOIZED IMPLEMENTATION

/* # As matrix implementation is slightly difficult(though not impossible), we will 
     we use an unordered_map for cache to avoid duplicated processing.
   # The key of the map will be a string composed of "s1 s2"
*/

bool isScrambleMemo(string s1, string s2)
{
   long long n=s1.length(), m=s2.length();

   //base condition(s)
   //strings of non-equal length cant' be scramble strings
   if(n!=m)
      return false;
   //empty strings are scramble strings 
   else if(n==0 && m==0)
      return true;
   //equal strings are scramble strings 
   else if(s1.compare(s2)==0)
      return true;
   //if n<=1 and s1!=s2, then strings are not scrambled
   else if(n<=1)
      return false;
   
   //forming a unique key(type: string) of the form: "s1 s2"
   string key=s1;
   key.push_back(' ');
   key.append(s2);

   //check if already calculated or not
   if(mp.find(key)!=mp.end())
      return mp[key]; //returns the value associated with key

  //choice diagram code
  bool flag=false; //to return final result, initially assuming that strings
                  //are not scrambled
  for(long long i=1; i<=(n-1); i++)
  {
     /*Case 1.) check if s1[0...(i-1)] is a scrambled string of s2[(n-i)....(n-1)] 
                and s1[i....(n-1)] is a scramble string of s2[0....(n-i-1)] 
                OR
      Case 2.)  check if s1[0...(i-1)] is a scrambled string of s2[0....(i-1)] 
                and s1[i....(n-1)] is a scramble string of s2[i....(n-1)] 
     */ 
     if((isScramble(s1.substr(0, i), s2.substr(n-i, i)) &&   //
         isScramble(s1.substr(i, n-i), s2.substr(0, n-i)))  // CASE 1
                           ||
        (isScramble(s1.substr(0, i), s2.substr(0, i)) &&       //
         isScramble(s1.substr(i, n-i), s2.substr(i, n-i))));  // CASE 2
     {
        //if found at any iteration that strings are scrambled break the loop
        flag=true;
        break;
     }
  }
  
  //store the answer calculated in the Cache map & return final result 
  return mp[key]=flag;
}

/* # mp is a map declared globally, whose key is of type "string" & value is of 
     type "bool" -> unordered_map<string, bool> mp;
                    mp.clear(); 
*/

**********************************************************************************************************


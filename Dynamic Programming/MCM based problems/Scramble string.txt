/*PROBLEM: Given two strings S1 and S2 of equal length, the task is to determine if S2 is a 
           scrambled form of S1.

           Scrambled string:
           Given string str, we can represent it as a binary tree by partitioning it to two non-empty substrings recursively.
           # Note: Srambled string is not same as an Anagram
           Below is one possible representation of str = “coder”:

                                    coder
                                   /    \
                                  co    der
                                 / \    /  \
                                c   o  d   er
                                           / \
                                          e   r
           To scramble the string, we may choose any non-leaf node and swap its two children.
           Suppose, we choose the node "co" and swap its two children, it produces a scrambled 
           string "ocder". 0 or more swappings are allowed.

                                    ocder
                                   /    \
                                  oc    der
                                 / \    /  \
                                o   c  d   er
                                           / \
                                          e   r
           Thus, “ocder” is a scrambled string of “coder”.

           Similarly, if we continue to swap the children of nodes “der” and “er”, it produces a scrambled string “ocred”.

                                    ocred
                                   /    \
                                  oc    red
                                 / \    /  \
                                o   c  re  d
                                       / \
                                      r   e
           Thus, “ocred” is a scrambled string of “coder”.
*/
/*PROBLEM: Given an array arr[] which represents the chain of matrices such that the ith 
           matrix A·µ¢ is of dimension arr[i-1] x arr[i]. We need to write a function MCM()
           that should return the minimum number of multiplications needed to multiply 
           the chain i.e. minimum cost of multiplying the matrices.
                                           OR
           Given a sequence of matrices, find the most efficient way to multiply these 
           matrices together. The problem is not actually to perform the multiplications,
           but merely to decide in which order to perform the multiplications, so that the
           cost of multiplying these matrices is  minimum.
*/

/* # The cost (i.e. #multiplications) of multiplying 2 matrices of order (a √ó b) & (b √ó c)
     is equal to (a*b*c).
   # If n elements are given in array then there are (n-1) matrices. üòÖ
   # In the algorithm written below ->
     ‚ñ† i is initialised as 1 (‚àµ 1À¢·µó matrix A‚ÇÅ is of order v[0] √ó v[1] ‚â° v[i-1] √ó v[i])
     ‚ñ† j is initialised as v.size()-1 
       (‚àµ last matrix A‚Çç‚Çô‚Çã‚ÇÅ‚Çé is of order v[v.size()-2] √ó v[v.size()-1] ‚â° v[j-1] √ó v[j]), 
       where n is v.size()
*/

//RECURSIVE IMPLEMENTATION

long long mcmRecur(vector<long long> &v, long long i, long long j)
{
	//base condition
	/*if(i>j ‚áí v[] is empty)
	  if(i==j ‚áí v[] has only 1 element)*/
	if(i>=j) 
	   return 0;

	long long res=INT_MAX; //to store final result
    
    //choice diagram code
    /*place parenthesis at different places by help of the suitable
      "k loop scheme" between first and last matrix, recursively
       calculate count of multiplications for each parenthesis  
       placement and return the  minimum count*/
    for(long long k=i; k<=(j-1); k++)
	{
	   /*(v[i-1] * v[k] * v[j]) is the cost of multiplying matrices from
	     (i to k) and (k+1 to j)*/ 
	   long long temp= mcmRecur(v, i, k) + mcmRecur(v, k+1, j) + (v[i-1] * v[k] * v[j]);
	   
	   //update res
	   if(temp<res)
	      res=temp;
	}

	return res;
}

//Time complexity of the above naive recursive approach is exponential.

**********************************************************************************************************

//MEMOIZED IMPLEMENTATION

long long mcmMemoized(vector<long long> &v, long long i, long long j)
{
	//base condition
	/*if(i>j ‚áí v[] is empty)
	  if(i==j ‚áí v[] has only 1 element)*/
	if(i>=j) 
	   return 0;
    
    //check if already calculated or not
    if(dp[i][j]!=-1) return dp[i][j];

	long long res=INT_MAX; //to store final result
    
    //choice diagram code
    /*place parenthesis at different places by help of the suitable
      "k loop scheme" between first and last matrix, recursively
       calculate count of multiplications for each parenthesis  
       placement and return the  minimum count*/
    for(long long k=i; k<=(j-1); k++)
	{
	   /*(v[i-1] * v[k] * v[j]) is the cost of multiplying matrices from
	     (i to k) and (k+1 to j)*/ 
	   long long temp= MCM(v, i, k) + MCM(v, k+1, j) + (v[i-1] * v[k] * v[j]);
	   
	   //update res
	   if(temp<res)
	      res=temp;
	}

	return dp[i][j]=res;
}

/*dp[][] is a 2 D global matrix/vector of vectors, with size (v.size())*(v.size()) 
  and initialized with -1, memset(dp, -1, sizeof(dp));
  It's dimensions are [v.size()] √ó [v.size()], as max values of the changing parameters
  i.e. i and j can be v.size()-1
*/

**********************************************************************************************************

//TABULATION IMPLEMENTATION (Real DP ;))

/* eg dp[][] matrix of dimensions 4 √ó 4 ---->
                       
                          j ‚Üí
                     0    1    2    3
                   ---------------------
                 0 |Inv |Inv |Inv |Inv |  
                   |----|----|----|----|
               i 1 |Inv |  0 |	  | Res|
               ‚Üì   |----|----|----|----|‚èé(L=3)(diagonal)  
                 2 |Inv |Inv | 0  |    |
                   |----|----|----|----|‚èé(L=2)(diagonal)  
                 3 |Inv |Inv |Inv | 0  |
                   |----|----|----|----|
                                        ‚èé(L=1)(diagonal)   
        *Inv = Invalid              
*/

long long mcmTabulation(vector<long long> &v, long long n)
{
	//initialisation of dp matrix
	/*The lower ŒîÀ° ≥ matrix is not initialised as in that part (i>j),
    which is an invalid case.
    Similarly dp[0][0.....(n-1)] is also not initialised as it's invalid*/
      
    //cost is zero when multiplying one matrix(i.e. L=1),
    //where L=chain length
    //       =#matrix(es) taken into consideration at a time
    for(long long i=1; i<n; i++)
       dp[i][i]=0;
    
    //choice diagram code iterative version
    for(long long L=2; L<n; L++)
    {
       //for each chain length L, i=left end index
       //                         j=right end index
       for(long long i=1; i<(n-L+1); i++)
       {
          long long j=i+L-1;
          dp[i][j]=LLONG_MAX;
          
          //"k loop scheme" for corresponding i and j
          for(long long k=i; k<=(j-1); k++)
          {
             /*(v[i-1] * v[k] * v[j]) is the cost of multiplying matrices from
	           (i to k) and (k+1 to j)*/ 
             long long temp=dp[i][k] + dp[k+1][j] + (v[i-1] * v[k] * v[j]);
             
             if(temp<dp[i][j])
                dp[i][j]=temp;
          }
       }
    }

    return dp[1][n-1]; //final result
}

//here n=v.size()
//Time Complexity: O(n¬≥)
//Auxiliary Space: O(n¬≤)

/*dp[][] is a 2 D global matrix/vector of vectors, with size (v.size())*(v.size()) 
  and initialized with -1, memset(dp, -1, sizeof(dp));
  It's dimensions are [v.size()] √ó [v.size()], as max values of the changing parameters
  i.e. i and j can be v.size()-1
*/
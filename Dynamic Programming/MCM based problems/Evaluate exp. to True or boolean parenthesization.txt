/*PROBLEM: Given a boolean expression with following symbols ->
           Symbols:
              'T' ---> true 
              'F' ---> false 
           And following operators filled between symbols ->
           Operators(logical not bitwise)
               &   ---> boolean AND
               |   ---> boolean OR
               ^   ---> boolean XOR 
           Count the number of ways we can parenthesize the expression so that the value of 
           expression evaluates to true.
           I/p is in the form of a string.
*/

//RECURSIVE IMPLEMENTATION

/*The implementation of the below algorithm slightly differs from MCM algorithm.
  This algo has one extra i/p arguement isTrue, which basically helps to find
  whether the function has to return the total #ways for which the expression,
  s[i....j] is evaluated to be "True" or "False".
  For s[0......(s.length()-1)] isTrue is passed as "True" from the main() fⁿ.
  But for the recursive calls isTrue is passed according to the requirement.
  Suppose -->         
                         
                                       (k-1) (k+1)
                                         ↓     ↓
                         ----------------------------------------          
                         |  |  |  |  |  |  |  |  |  |  |  |  |  |
                         ----------------------------------------
                          ↑                  ↑                ↑
                         (i)             (suppose)           (j)
                                        (k is here)
                                        and s[k]='^'
                                        /           \
                                       /             \
                                      /               \
                                     /                 \
                                    /                   \
                       -------------------         -------------------         
                       |  |  |  |  |  |  |         |  |  |  |  |  |  |
                       -------------------         -------------------
                        ↑               ↑           ↑              ↑ 
                       (i)            (k-1)       (k+1)           (j)
                      
                       <------left(l)----->        <------right(r)----->
          
          # Truth table for xor('^')
              INPUT	        OUTPUT
           Left  Right	 Left ^ Right
            F     F	          F         
            F     T	          T        
            T     F           T        
            T     T	          F        
          
          # For s to be evaluated as true, when s[k]='^', there are 2 possibilities
            1). left part evaluates to true and right part evaluates to false
                i.e. lt and rf, ∴ ways = lt * rf
            2). left part evaluates to false and right part evaluates to true
                i.e. lf and rt, ∴ ways = lf * rt

            Hence total ways for which s evaluates to be true= (lt * rf) + (lf * rt)

          # For s to be evaluated as false, when s[k]='^', there are 2 possibilities
            1). left part evaluates to true and right part evaluates to true
                i.e. lt and rt, ∴ ways = lt * rt
            2). left part evaluates to false and right part evaluates to false
                i.e. lf and rf, ∴ ways = lf * rf

            Hence total ways for which s evaluates to be true= (lt * rt) + (lf * rf)
*/

long long countParenthesizationRecur(string s, long long i, long long j, bool isTrue)
{
	//base condition(s)
	if(i>j) //when s.length() is 0
	   return 0;
	if(i==j) //when s.length() is 1
	{
	   if(isTrue==true) //if s[i...j] is evaluated to be true
	      return s[i]=='T' ? 1 : 0;
	   else //if s[i...j] is evaluated to be false
	      return s[i]=='F' ? 1 : 0;
	}
    
    long long res=0; //to store final result

	//choice diagram code
	//"k loop scheme"
    for(long long k=(i+1); k<=(j-1); k+=2)
    {
       //temporary answers
       long long lt= countParenthesizationRecur(s, i, k-1, true);
       long long lf= countParenthesizationRecur(s, i, k-1, false);
       long long rt= countParenthesizationRecur(s, k+1, j, true);
       long long rf= countParenthesizationRecur(s, k+1, j, false);
       
       //calculating final answer i.e. res which is fⁿ(temporary answers)
       if(s[k]=='&')
       {
          if(isTrue==true)
             res+= (lt * rt);
          else //isTrue==false
             res+= (lt * rf) + (lf * rt) + (lf * rf);
       }
       
       else if(s[k]=='|')
       {
          if(isTrue==true)
             res+= (lt * rt) + (lt * rf) + (lf * rt);
          else //isTrue==false
             res+= (lf * rf);
       }
       
       else //when (s[k]=='^')
       {
          if(isTrue==true)
             res+= (lt * rf) + (lf * rt);
          else //isTrue==false
             res+= (lf * rf) + (lt * rt);
       }
    }

    return res;
}

/* # i is initialised to 0 in the main fⁿ
   # j is initialised to s.length()-1 in the main fⁿ
   # isTrue is initialised to "true" in the main fⁿ, ∵ we need to count total #ways for 
     which s from 0 to s.length()-1 evaluates to be "true"
   # Here in the above algorithm i and j always points to the operands i.e. either 'T'
     or 'F', k always points to an operator i.e. s[k] ε {'&', '|', '^'}

   # Time Complexity: Exponential
*/

*********************************************************************************************************

//MEMOIZED IMPLEMENTATION

/*# To implement memoized version of this algorithm, we need a dp matrix, which is a 
    3 D matrix, ∵ 3 parameters of the countParenthesizationMemo() fⁿ are changing
    (i, j, and isTrue are changing while s remains same in all fⁿ calls).
    ∴ dp[n][n][2] ≡ 3D matrix, (as maximum value taken by i and j can be s.length()-1,
      for isTrue 2 values are possible).
      Here n=s.length().
  # As imagination of a 3D matrix is slightly difficult, we wiil implement the same thing
    using a global map.
  # The key of the map will be a string composed of "val(i)+val(j)+val(isTrue)"
*/

long long countParenthesizationMemo(string s, long long i, long long j, bool isTrue)
{
	//base condition(s)
	if(i>j) //when s.length() is 0
	   return 0;
	if(i==j) //when s.length() is 1
	{
	   if(isTrue==true) //if s[i...j] is evaluated to be true
	      return s[i]=='T' ? 1 : 0;
	   else //if s[i...j] is evaluated to be false
	      return s[i]=='F' ? 1 : 0;
	}
    
    //forming a unique key(type: string) of the form: "i j isTrue"
    string key=to_string(i);
    //string::push_back() is used to push a single char at the end of a string
    key.push_back(' '); 
    //string::append() is used to append a string at the end of a string 
    key.append(to_string(j));
    key.push_back(' ');
    key.append(to_string(isTrue));

    //check if already calculated or not
    if(mp.find(key)!=mp.end())
       return mp[key]; //returns the value associated with key

    long long res=0; //to store final result

	//choice diagram code
	//"k loop scheme"
    for(long long k=(i+1); k<=(j-1); k+=2)
    {
       //temporary answers
       long long lt= countParenthesizationRecur(s, i, k-1, true);
       long long lf= countParenthesizationRecur(s, i, k-1, false);
       long long rt= countParenthesizationRecur(s, k+1, j, true);
       long long rf= countParenthesizationRecur(s, k+1, j, false);
       
       //calculating final answer i.e. res which is fⁿ(temporary answers)
       if(s[k]=='&')
       {
          if(isTrue==true)
             res+= (lt * rt);
          else //isTrue==false
             res+= (lt * rf) + (lf * rt) + (lf * rf);
       }
       
       else if(s[k]=='|')
       {
          if(isTrue==true)
             res+= (lt * rt) + (lt * rf) + (lf * rt);
          else //isTrue==false
             res+= (lf * rf);
       }
       
       else //when (s[k]=='^')
       {
          if(isTrue==true)
             res+= (lt * rf) + (lf * rt);
          else //isTrue==false
             res+= (lf * rf) + (lt * rt);
       }
    }

    return mp[key]=res;
}

/* # i is initialised to 0 in the main fⁿ
   # j is initialised to s.length()-1 in the main fⁿ
   # isTrue is initialised to "true" in the main fⁿ, ∵ we need to count total #ways for 
     which s from 0 to s.length()-1 evaluates to be "true"
   # Here in the above algorithm i and j always points to the operands i.e. either 'T'
     or 'F', k always points to an operator i.e. s[k] ε {'&', '|', '^'}
   # mp is a map declared globally-> unordered_map<string, long long> mp;
                                     mp.clear(); 
*/

*********************************************************************************************************
/*PROBLEM: Given two sequences, find the length of longest subsequence present in 
           both of them. A subsequence is a sequence that appears in the same 
           relative order, but not necessarily contiguous. For example, “abc”, 
           “abg”, “bdf”, “aeg”, ‘”acefg”, .. etc are subsequences of “abcdefg”.
*/

//RECURSIVE IMPLEMENTATION

long long lcsLength(string s1, string s2, long long n, long long m)
{
	//base condition
	if(n==0 || m==0) //if length of any of the i/p string
	   return 0;    //is 0 then lcs length=0

	//choice diagram code
	if(s1[n-1]==s2[m-1])
	   return 1 + lcsLength(s1, s2, n-1, m-1);

	else
	   return max(lcsLength(s1, s2, n, m-1),
	              lcsLength(s1, s2, n-1, m));
}

//n is s1.length() & m is s2.length()

*****************************************************************************************************

//MEMOIZED IMPLEMENTATION

long long lcsLength(string s1, string s2, long long n, long long m)
{
	//base condition
	if(n==0 || m==0) //if length of any of the i/p string
	   return 0;    //is 0 then lcs length=0

    //check if already calculated or not
    if(dp[n][m]!=-1) return dp[n][m];

	//choice diagram code
	if(s1[n-1]==s2[m-1])
	   return dp[n][m]= 1 + lcsLength(s1, s2, n-1, m-1);

	else
	   return dp[n][m]= max(lcsLength(s1, s2, n, m-1),
	                        lcsLength(s1, s2, n-1, m));
}

//n is s1.length() & m is s2.length()
//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(m+1) and initialized 
//with -1, memset(dp, -1, sizeof(dp));

*****************************************************************************************************

//TABULATION IMPLEMENTATION (Real DP ;))

long long lcsLength(string s1, string s2, long long n, long long m)
{
	//initialisation of dp matrix
	/*if length of any of the i/p string=0,
	  then lcs length=0*/
	for(long long i=0; i<(n+1); i++) dp[i][0]=0;
	for(long long j=0; j<(m+1); j++) dp[0][j]=0;

	//choice diagram code iterative version
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(m+1); j++)
	   {
	      if(s1[i-1]==s2[j-1])
	         dp[i][j]= 1 + dp[i-1][j-1];

	      else
	         dp[i][j]= max(dp[i][j-1], dp[i-1][j]);
	   }
	}

	return dp[n][m];
}

//n is s1.length() & m is s2.length()
//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(m+1)
/*PROBLEM: Given a string str, the task is to find the minimum number of characters
           to be inserted to convert it to palindrome.
*/

/* Underlying concept: 
   (Min #insertions to make = (Min #deletions to make
        a str palindrome)        a str palindrome)

   âˆ´ Code is same for both.
*/

long long lcsLength(string s1, string s2, long long n, long long m)
{
	//initialisation of dp matrix
	/*if length of any of the i/p string=0,
	  then lcs length=0*/
	for(long long i=0; i<(n+1); i++) dp[i][0]=0;
	for(long long j=0; j<(m+1); j++) dp[0][j]=0;

	//choice diagram code iterative version
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(m+1); j++)
	   {
	      if(s1[i-1]==s2[j-1])
	         dp[i][j]= 1 + dp[i-1][j-1];

	      else
	         dp[i][j]= max(dp[i][j-1], dp[i-1][j]);
	   }
	}

	return dp[n][m];
}

long long lpsLength(string s)
{
	return lcsLength(s, reverse(s.begin(), s.end()), s.length(), s.length()); 
}


long long minNumberOfInsertions(string s)
{
	return s.length() - lpsLength(s);
}

//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(n+1),
//where n is the s.length()
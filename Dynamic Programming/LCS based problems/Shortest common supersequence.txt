/*PROBLEM: Given two strings str1 and str2, find the length of the shortest string 
           that has both str1 and str2 as subsequences.
*/

long long lcsLength(string s1, string s2, long long n, long long m)
{
	//initialisation of dp matrix
	/*if length of any of the i/p string=0,
	  then lcs length=0*/
	for(long long i=0; i<(n+1); i++) dp[i][0]=0;
	for(long long j=0; j<(m+1); j++) dp[0][j]=0;

	//choice diagram code iterative version
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(m+1); j++)
	   {
	      if(s1[i-1]==s2[j-1])
	         dp[i][j]= 1 + dp[i-1][j-1];

	      else
	         dp[i][j]= max(dp[i][j-1], dp[i-1][j]);
	   }
	}

	return dp[n][m];
}

long long scsLength(string s1, string s2)
{
	long long n=s1.length(), m=s2.length();
	return n + m - lcsLength(s1, s2, n, m);
}

//SCS or scs = Shortest Common Supersequence
//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(m+1)
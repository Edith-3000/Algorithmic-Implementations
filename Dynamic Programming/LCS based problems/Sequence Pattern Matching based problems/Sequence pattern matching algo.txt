/*PROBLEM: Given 2 strings S1 and S2. Find out whether S1 is a subsequence of S2
           or not? Return a boolean value (True/False).
*/

/*Underlying concept: # s1 is a subsequence of s2 iff ->
                        lcs(s1, s2) == s1.
                      # But here there is no need to find the complete LCS(s1, s2), 
                        only lcsLength(s1, s2) will suffice, as:
                        ⇒ lcsLength(s1, s2) ϵ [0, min(n, m)],
                        where n=s1.length(), m=s2.length()
*/

long long lcsLength(string s1, string s2, long long n, long long m)
{
	//initialisation of dp matrix
	/*if length of any of the i/p string=0,
	  then lcs length=0*/
	for(long long i=0; i<(n+1); i++) dp[i][0]=0;
	for(long long j=0; j<(m+1); j++) dp[0][j]=0;

	//choice diagram code iterative version
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(m+1); j++)
	   {
	      if(s1[i-1]==s2[j-1])
	         dp[i][j]= 1 + dp[i-1][j-1];

	      else
	         dp[i][j]= max(dp[i][j-1], dp[i-1][j]);
	   }
	}

	return dp[n][m];
}


bool isSubsequence(string s1, string s2)
{
	if((long long)s1.length() == lcsLength(s1, s2, s1.length(), s2.length()))
	   return true;

	else
	   return false;
}

//n is s1.length() & m is s2.length()
//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(m+1)
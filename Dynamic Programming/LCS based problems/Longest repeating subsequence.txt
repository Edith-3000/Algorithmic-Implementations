/*PROBLEM: Given a string, find length of the longest repeating subseequence such 
           that the two subsequence don’t have same string character at same position, i.e.,
           any i’th character in the two subsequences shouldn’t have the same index in the original string.
*/

/*This problem is just the modification of Longest Common Subsequence problem. The 
  idea is to find the LCS(str, str)where str is the input string with the restriction
  that when both the characters are same, they shouldn’t be on the same index in the 
  two strings.
*/

long long longestRepeatingSubSequenceLength(string s)
{
    string s1=s, s2=s;
    long long n=s1.length(), m=s2.length(); //n==m

	//initialisation of dp matrix
	/*if length of any of the i/p string=0,
	  then lcs length=0*/
	for(long long i=0; i<(n+1); i++) dp[i][0]=0;
	for(long long j=0; j<(m+1); j++) dp[0][j]=0;
    
	//choice diagram code iterative version
	//Fill dp table (similar to LCS loops) 
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(m+1); j++)
	   {
	      //If characters match and indexes are  
          //not same 
	      if(s1[i-1]==s2[j-1] && i!=j)
	         dp[i][j]= 1 + dp[i-1][j-1];
          
          //If characters do not match
	      else
	         dp[i][j]= max(dp[i][j-1], dp[i-1][j]);
	   }
	}

	return dp[n][m];
}

//n is s1.length() & m is s2.length()
//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(m+1)
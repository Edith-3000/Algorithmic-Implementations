/*PROBLEM: Given two strings ‘str1’ and ‘str2’ of size n and m respectively.
           The task is to remove/delete and insert minimum number of characters
           from/in str1 so as to transform it into str2. It could be possible that
           the same character needs to be removed/deleted from one point of str1 
           and inserted to some another point.
*/

/*The underlying concept of the algorithm discussed below is ->
  Firstly convert s1 to lcs(s1, s2).
  Then convert the obtained lcs to s2.
  i.e. convert s1 to s2 via LCS.

  Diagramatically: s1 ----------------------------------------- s2
                    |                                            ^
                    |                                            |
                    |                        (via)               |
                    ---------------------->LCS(s1,s2)-------------
                      #deletions                		#insertion
                      required                  		required
                      =s1.length()-lcsLength    		=s2.length()-lcsLength

   ∴ Total #deletions & insertions required = s1.length()+s2.length()-(2*lcsLength)
*/

long long lcsLength(string s1, string s2, long long n, long long m)
{
	//initialisation of dp matrix
	/*if length of any of the i/p string=0,
	  then lcs length=0*/
	for(long long i=0; i<(n+1); i++) dp[i][0]=0;
	for(long long j=0; j<(m+1); j++) dp[0][j]=0;

	//choice diagram code iterative version
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(m+1); j++)
	   {
	      if(s1[i-1]==s2[j-1])
	         dp[i][j]= 1 + dp[i-1][j-1];

	      else
	         dp[i][j]= max(dp[i][j-1], dp[i-1][j]);
	   }
	}

	return dp[n][m];
}

long long minDelAndInsert(string s1, string s2)
{
   long long n=s1.length(), m=s2.length();
   return n + m - (2*lcsLength(s1, s2, n, m));
}

//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(m+1)
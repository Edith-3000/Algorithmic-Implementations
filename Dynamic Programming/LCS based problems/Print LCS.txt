/*PROBLEM: Given two sequences, print the longest subsequence present in both of
           them.
*/

void lcs(string s1, string s2, long long n, long long m)
{
	//initialisation of dp matrix
	/*if length of any of the i/p string=0,
	  then lcs length=0*/
	for(long long i=0; i<(n+1); i++) dp[i][0]=0;
	for(long long j=0; j<(m+1); j++) dp[0][j]=0;

	//choice diagram code iterative version
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(m+1); j++)
	   {
	      if(s1[i-1]==s2[j-1])
	         dp[i][j]= 1 + dp[i-1][j-1];

	      else
	         dp[i][j]= max(dp[i][j-1], dp[i-1][j]);
	   }
	}
}

string printLCS(string s1, string s2)
{
	//function to create the complete dp[][] matrix
	lcs(s1, s2, s1.length(), s2.length());
    
    long long i=s1.length(), j=s2.length(); //starting from right
                                           //bottom cell of dp[][]
    string res=""; //empty string to store the result

    while(i>0 && j>0)
    {
       if(s1[i-1]==s2[j-1])
       {
          res.push_back(s1[i-1]);
          //moving to the diagonally above cell to the
          //current cell
          i--; j--;
       }

       else
       {
          if(dp[i][j-1]>dp[i-1][j]) j--;
          else i--; //dp[i][j-1]<=dp[i-1][j]
       }
    }

    reverse(res.begin(), res.end());
    return res;
}

//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(m+1)
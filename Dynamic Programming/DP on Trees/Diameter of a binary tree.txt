/*PROBLEM: The diameter of a tree (sometimes called the width) is the number of nodes on the 
           longest path between two end nodes OR the number of edges on the longest path between 
           two end nodes (depends on what the question is asking).
           This path may or may not pass through the root.
           # NOTE: in the below algorithm we are considering the 1ˢᵗ definition for diameter
                   of a binary tree.
*/

/* Definition for a binary tree node ⟶
   struct node {
       int val;
       node *left;
       node *right;
       node() : val(0), left(nullptr), right(nullptr) {}
       node(int x) : val(x), left(nullptr), right(nullptr) {}
       node(int x, node *left, node *right) : val(x), left(left), right(right) {}
   };
*/

long long diaOfBinaryTree(node *root, long long &res)
{
	//base condition
	if(root==nullptr)
	   return 0;

	//hypothesis
	long long l= diaOfBinaryTree(root->left, res);
	long long r= diaOfBinaryTree(root->right, res);

	//induction
	long long temp=1 + max(l, r);
	long long ans=max(temp, 1+l+r);
	res=max(res, ans);

	return temp;
}

/*The final answer is stored in res variable, which is passed by reference in every fⁿ call.
  In the main() fⁿ res is initialised as res= LLONG_MIN;
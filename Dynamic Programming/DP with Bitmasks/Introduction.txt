// Source(s): https://www.quora.com/What-is-bitmasking-What-kind-of-problems-can-be-solved-using-it
//            https://www.hackerearth.com/practice/algorithms/dynamic-programming/bit-masking/tutorial/

===============================================================================================================

𝑾𝑯𝑨𝑻 𝑰𝑺 𝑩𝑰𝑻𝑴𝑨𝑺𝑲𝑰𝑵𝑮 ?

The most precise definition I could come up with (w.r.t. competitive programming) : Bitmasking usually refers 
to the technique of representing a subset of a set using a bit vector, where ith bit of the vector is set iff 
the corresponding element belongs to the subset.

Eg,  S={a,b,c,d}, then bit vector  b=(1,0,1,1) would represent the subset S′={a,c,d} .

As clear from the definition, it is useful where ever subsets have to be considered, and is usually needed in 
competitive programming when all subsets have to be iterated upon. 
This technique is better than the usual recursive way of generating all subsets because it's easier, saves memory
on call stack, and saves the parameter passing hassles. The simplicity comes because 𝒃𝒊𝒕 𝒗𝒆𝒄𝒕𝒐𝒓𝒔 𝒐𝒇 𝒔𝒎𝒂𝒍𝒍 𝒔𝒊𝒛𝒆 𝒄𝒂𝒏 𝒃𝒆 𝒓𝒆𝒑𝒓𝒆𝒔𝒆𝒏𝒕𝒆𝒅 𝒃𝒚 𝒊𝒏𝒕𝒆𝒈𝒆𝒓𝒔. Eg, mask=6 corresponds to 110, meaning subset of second and third element (numbering 
starts from least significant bit).

Here is a sample problem to demonstrate it's usage :
Given a set S of integers, find the number of subsets of S whose elements sum up a given value  K.

There are different ways to solve this problem based on the limits on |S| and sum of elements of S. We assume 
that |S| is small and the all subset  O(2^|S|) method is feasible.

Consider mask = 0. This corresponds to empty subset of S, it's sum being 0. Increasing the mask by 1 gives mask=1, 
which corresponds to subset containing 1st element of S. Hope you get the gist. Here's a pseudocode :


mask := 0 
cnt := 0 
while mask < (1 << |S|) do begin  // total subset are 2^|S| 
  sm := 0 
  for i := 0 to |S|-1 do begin 
    if mask & (1<<i) then begin   // checking if the ith bit is set 
      sm += S[i] 
    end 
  end 
  if sm = K then cnt+=1 
  mask+=1 
end 
print cnt 

So basically Bitmask is nothing but a binary number (bit vector) that represents something. Mask in Bitmask 
means hiding something.

// FIRST THING TO MAKE SURE BEFORE USING BITMASKS FOR SOLVING A PROBLEM IS THAT IT MUST BE HAVING SMALL 
// CONSTRAINTS, AS SOLUTIONS WHICH USE BITMASKING GENERALLY TAKE UP EXPONENTIAL TIME AND MEMORY.
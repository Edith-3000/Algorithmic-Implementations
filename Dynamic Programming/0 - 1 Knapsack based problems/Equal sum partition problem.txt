/*PROBLEM: To determine whether a given set can be partitioned into two subsets such that the 
           sum of elements in both subsets is same.
           NOTE: # The intersection of both the subsets must be Ø.
                 # The union of both the subsets must be the original set.
                 # All the elements of the set are non -ve.
*/

bool isSubsetSum(vector<long long> &v, long long sum, long long n)
{
	//initialisation of dp matrix
	for(long long i=0; i<(n+1); i++) dp[i][0]=true; //if sum is 0, then Ø is the required subset 
	for(long long j=1; j<(sum+1); j++) dp[0][j]=false;

	//choice diagram code iterative version
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(sum+1); j++)
	   {
	      if(v[i-1]<=j)
	         dp[i][j]=dp[i-1][j-v[i-1]] || dp[i-1][j];

	      else //when v[i-1]>sum
	         dp[i][j]=dp[i-1][j];
	   }
	}

	return dp[n][sum];
}

bool isEqualSumPartition(vector<long long> &v)
{
	//find sum of vector v
	long long sum=0;
	for(long long i=0; i<v.size(); i++) sum+=v[i];

	if(sum & 1) return false; //odd sum can't be equally partitioned 
	else return isSubsetSum(v, long long sum/2, v.size()); //find whether a subset with 
	                                                      //sum=sum/2 is present or not
}

//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(sum/2 + 1), where n is the size of v vector.
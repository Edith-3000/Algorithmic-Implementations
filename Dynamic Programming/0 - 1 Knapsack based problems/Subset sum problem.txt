/*PROBLEM: Given a set of non-negative integers, and a value sum, determine if there is a 
           subset of the given set with sum equal to given sum.
*/

/*Approach very much similar to 0/1 knapsack algorithm, 
  wt[] ---> v
  w ---> sum
  n is the size of v vector
*/

bool isSubsetSum(vector<long long> &v, long long sum, long long n)
{
	//initialisation of dp matrix
	for(long long i=0; i<(n+1); i++) dp[i][0]=true; //if sum is 0, then Ã˜ is the required subset 
	for(long long j=1; j<(sum+1); j++) dp[0][j]=false;

	//choice diagram code iterative version
	for(long long i=1; i<(n+1); i++)
	{
	   for(long long j=1; j<(sum+1); j++)
	   {
	      if(v[i-1]<=j)
	         dp[i][j]=dp[i-1][j-v[i-1]] || dp[i-1][j];

	      else //when v[i-1]>sum
	         dp[i][j]=dp[i-1][j];
	   }
	}

	return dp[n][sum];
}

//dp[][] is a 2 D global matrix/vector of vectors, with size (n+1)*(sum+1), where n is the size of v vector.
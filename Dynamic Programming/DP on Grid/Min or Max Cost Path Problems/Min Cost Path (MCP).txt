/*PROBLEM: Given a cost matrix cost[][] and a position (m, n) in cost[][], write a function that returns 
           cost of minimum cost path to reach (m, n) from (0, 0). 
           Each cell of the matrix represents a cost to traverse through that cell. 
           Total cost of a path to reach (m, n) is sum of all the costs on that path (including both source and destination). 
           You can only traverse down, right and diagonally lower cells from a given cell, i.e., from a given cell (i, j), cells (i+1, j), (i, j+1) and (i+1, j+1) can be traversed. You may assume that all costs are positive integers.
           Note: m and n are given on 0 based indexing.
*/

//RECURSIVE IMPLEMENTATION

// A utility function that returns minimum of 3 integers 
int min(int x, int y, int z) 
{ 
   if (x < y) 
      return (x < z)? x : z; 
   else
      return (y < z)? y : z; 
} 

int mcp(vector<vector<int>> &cost, int m, int n)
{
	// base condition(s)
	if(m<0 || n<0)
	   return INT_MAX;

	if(m==0 && n==0)
	   return cost[m][n];
    
    // choice diagram code
	return cost[m][n] + min(mcp(cost, m-1, n),
	                        mcp(cost, m, n-1),
	                        mcp(cost, m-1, n-1));
}

//Time complexity: Exponential in power of 3
//Auxiliary Space: O(1)

*****************************************************************************************************************

//MEMOIZED IMPLEMENTATION

// A utility function that returns minimum of 3 integers 
int min(int x, int y, int z) 
{ 
   if (x < y) 
      return (x < z)? x : z; 
   else
      return (y < z)? y : z; 
} 

int mcp(vector<vector<int>> &cost, int m, int n)
{
	// base condition(s)
	if(m<0 || n<0)
	   return INT_MAX;

	if(m==0 && n==0)
	   return cost[m][n];
    
    // check if already calculated or not
	if(dp[m][n]!=1)
	   return dp[m][n];
    
    // choice diagram code
	return dp[m][n]= cost[m][n] + min(mcp(cost, m-1, n),
	                                  mcp(cost, m, n-1),
	                                  mcp(cost, m-1, n-1));
}

/*# Time complexity: 
  # Auxiliary Space: O(r*c), where r and c are the #rows and #columns in cost[][].
  # dp[][] is a 2 D global matrix/vector of vectors, with size same as that of cost[][] and initialized with -1, memset(dp, -1, sizeof(dp));
*/

*****************************************************************************************************************

//TABULATION IMPLEMENTATION (Real DP ;))

// A utility function that returns minimum of 3 integers 
int min(int x, int y, int z) 
{ 
   if (x < y) 
      return (x < z)? x : z; 
   else
      return (y < z)? y : z; 
} 

int mcp(vector<vector<int>> &cost, int m, int n)
{
	// initialisation of dp matrix
	dp[0][0]=cost[0][0];

	for(int i=1; i<=m; i++) 
	   dp[i][0]=dp[i-1][0]+cost[i][0];

	for(int j=1; j<=n; j++) 
	   dp[0][j]=dp[0][j-1]+cost[0][j];

	// choice diagram code iterative version
	for(int i=1; i<=m; i++)
	{
	   for(int j=1; j<=n; j++)
	      dp[i][j]=min(dp[i-1][j]+dp[i][j-1]+dp[i-1][j-1]) + cost[i][j];
	}

	// return final answer
	return dp[m][n];
}

/*# Time complexity: O(m*n)
  # Auxiliary Space(worst case): O(r*c), where r and c are the #rows and #columns in cost[][].
  # dp[][] is a 2 D global matrix/vector of vectors, with size same as that of cost[][]
*/

****************************************************************************************************************

// SPACE OPTIMIZED TABULATION IMPLEMENTATION
// The idea is to use same given cost[][] matrix to store the solutions of subproblems.

// A utility function that returns minimum of 3 integers 
int min(int x, int y, int z) 
{ 
   if (x < y) 
      return (x < z)? x : z; 
   else
      return (y < z)? y : z; 
} 

int mcp(vector<vector<int>> &cost, int m, int n)
{
	// initialisation process
	for(int i=1; i<=m; i++) 
	   cost[i][0]+=cost[i-1][0];

	for(int j=1; j<=n; j++) 
	   cost[0][j]+=cost[0][j-1];

	// choice diagram code iterative version
	for(int i=1; i<=m; i++)
	{
	   for(int j=1; j<=n; j++)
	      cost[i][j] += min(cost[i-1][j]+cost[i][j-1]+cost[i-1][j-1]);
	}

	// return final answer
	return cost[m][n];
}

/*# Time complexity: O(m*n)
  # Auxiliary Space: O(1)
*/

****************************************************************************************************************

# 𝑵𝑶𝑻𝑬: 𝑴𝒂𝒙 𝑪𝒐𝒔𝒕 𝑷𝒂𝒕𝒉 𝒄𝒂𝒏 𝒃𝒆 𝒇𝒐𝒖𝒏𝒅 𝒔𝒊𝒎𝒊𝒍𝒂𝒓𝒍𝒚 𝒃𝒚 𝒋𝒖𝒔𝒕 𝒖𝒔𝒊𝒏𝒈 𝒎𝒂𝒙 𝒇𝒖𝒏𝒄𝒕𝒊𝒐𝒏 𝒊𝒏𝒔𝒕𝒆𝒂𝒅 𝒐𝒇 𝒎𝒊𝒏.
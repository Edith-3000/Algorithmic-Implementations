/*PROBLEM: Given a 2-D matrix, find the number of ways to reach cell with coordinates (m, n) from 
           starting cell (0,0) under the condition that you can only travel one step right or one step down.
           Note: # 𝑵𝒐 𝒄𝒆𝒍𝒍𝒔 𝒐𝒇 𝒕𝒉𝒆 𝒎𝒂𝒕𝒓𝒊𝒙 𝒂𝒓𝒆 𝒃𝒍𝒐𝒄𝒌𝒆𝒅.
                 # m and n are given on 0 based indexing.
*/

//RECURSIVE IMPLEMENTATION

int numberOfPaths(int m, int n)
{
    // base condition(s)
	if(m==0 || n==0)
	   return 1;
    
    // choice diagram code
	return numberOfPaths(m-1, n) + numberOfPaths(m, n-1);
}

//Time complexity: Exponential in power of 2
//Auxiliary Space: O(1)

*****************************************************************************************************************

//MEMOIZED IMPLEMENTATION

int numberOfPaths(int m, int n)
{
	// base condition(s)
	if(m==0 || n==0)
	   return 1;
    
    // check if already calculated or not
	if(dp[m][n]!=-1)
	   return dp[m][n];

    // choice diagram code
	return dp[m][n]=numberOfPaths(m-1, n) + numberOfPaths(m, n-1);
}

/*# Time complexity: 
  # Auxiliary Space: O(r*c), where r and c are the #rows and #columns in the given 2 D Matrix.
  # dp[][] is a 2 D global matrix/vector of vectors, with size same as that of given 2 D Matrix and 
    initialized with -1, memset(dp, -1, sizeof(dp));
*/

*****************************************************************************************************************

//TABULATION IMPLEMENTATION (Real DP ;))

int numberOfPaths(int m, int n)
{
	// initialisation of dp matrix
	for(int i=0; i<=m; i++) dp[i][0]=1;
	for(int j=1; j<=n; i++) dp[0][j]=1;

	// choice diagram code iterative version
	for(int i=1; i<=m; i++)
	{
	   for(int j=1; j<=n; j++)
	      dp[i][j]=dp[i-1][j]+dp[i][j-1];
	}

	// return final answer
	return dp[m][n];
}

/*# Time complexity: O(m*n)
  # Auxiliary Space: O(r*c), where r and c are the #rows and #columns in the given 2 D Matrix.
  # dp[][] is a 2 D global matrix/vector of vectors, with size same as that of given 2 D Matrix given.
*/

*****************************************************************************************************************

// SPACE OPTIMIZED TABULATION IMPLEMENTATION

int numberOfPaths(int m, int n)
{
	// initialisation of dp matrix
    dp[0]=1;

    for(int i=0; i<=m; i++)
    {
       for(int j=1; j<=n; j++)
          dp[j]+=dp[j-1];
    }

    // return final answer
	return dp[n];
}

/*# Time complexity: O(m*n)
  # Auxiliary Space: O(n), where n is the column number from (m, n).
  # dp[] is a 1 D global matrix/vector, with size 'n', initially initialised with 0 in main fⁿ,
    int dp[n] = {0};
*/

****************************************************************************************************************

// MATHEMATICAL IMPLEMENTATION

/*UNDERLYING CONCEPT ----->
  # In order to reach a cell (m, n) (0 based indexing), effectively we've to travel m rows downwards 
    and n columns right.
  # Therefore permute all the steps i.e. (m + n)!
                                        ---------- 
                                         m! * n!
    (∵ all the m downward steps are same & all the n rights steps are same, ∴ we division by m! * n!)

 # The above formula changes to (m + n - 2)!
                               ---------------  if (m, n) are given on 1 based indexing.
                               (m-1)! * (n-1)!

*/
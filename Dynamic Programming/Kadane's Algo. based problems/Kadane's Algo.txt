/*PROBLEM: Given an array arr of n integers. Find the contiguous sub-array with maximum sum.
*/

//BRUTE FORCE APPROACH (O(n³))

# Make use of 3 loops and find the maximum contiguous sum.

   long long mx=LLONG_MIN;

   for(long long i=0; i<n; i++)
   {
      for(long long j=i; j<n; j++)
      {
         long long sum=0;
         for(long long k=i; k<=j; k++)
            sum+=v[i];

         mx=max(mx, sum);
      }
   }
   
   return mx;

/* # Time Complexity: O(n³)
   # Space complexity: O(1)
*/

****************************************************************************************************************

//BRUTE FORCE APPROACH (O(n²))

# Make use of 2 loops and find the maximum contiguous sum.

   long long mx=LLONG_MIN;

   for(long long i=0; i<n; i++)
   {
      long long sum=0;
      for(long long j=i; j<n; j++)
      {
         sum+=v[j];
         mx=max(mx, sum);
      }   
   }
   
   return mx;

/* # Time Complexity: O(n²)
   # Space complexity: O(1)
*/

****************************************************************************************************************

//LINEAR TIME IMPLEMENTATION (USING KADANE’s ALGORITHM)

/*UNDERLYTING CONCEPT: ------>
  # The idea is to maintain maximum (𝒑𝒐𝒔𝒊𝒕𝒊𝒗𝒆 𝒔𝒖𝒎) sub-array “𝒆𝒏𝒅𝒊𝒏𝒈” at each index of the given array. 
    This subarray is either empty (in which case its sum is zero) or consists of one more element than the maximum subarray ending at the previous index.
*/

long long kadaneAlgo(vector<long long> &v)
{
	long long n=v.size();
    
    //to store the maximum of all the sub-array sums calculated so far
	long long maxSoFar=0;

	//to store maximum sum of sub-array 𝒆𝒏𝒅𝒊𝒏𝒈 at current position (i)
	long maxEndingHere=0;

	for(long long i=0; i<n; i++)
	{
	   //update maximum sum of sub-array "𝒆𝒏𝒅𝒊𝒏𝒈" at index i (by adding
	   //current element to maximum sum ending at previous index i-1)
	   maxEndingHere+=v[i];

	   //if maximum sum for sub-array ending at current index (i) is -ve, 
	   //set it to 0 (which represents an empty sub-array), ∵ adding a -ve
	   //num doesn't increase a quantity
	   maxEndingHere=max(maxEndingHere, 0);
       
       //update result if current sub-array(ending at index(i)) sum is 
       //found to be greater
	   maxSoFar=max(maxSoFar, maxEndingHere);
	}
    
    //return final result
	return maxSoFar;
}

/*Time Complexity: O(n)
  Space Complexity: O(1)
*/

---------------------------------------------------------------------------------------

/* # Above code doesn’t handle the case when all elements of the array are -ve(above code will return 
     0 in this case). 
   # If the array contains all -ve values, the answer should be the maximum element. We can easily place 
     this check before continuing to the algorithm.
*/

long long kadaneAlgo(vector<long long> &v)
{
	long long res= *max_element(v.begin(), v.end);
	if(res<0) return res;

	long long n=v.size();
    
    //to store the maximum of all the sub-array sums calculated so far
	long long maxSoFar=0;

	//to store maximum sum of sub-array 𝒆𝒏𝒅𝒊𝒏𝒈 at current position (i)
	long maxEndingHere=0;

	for(long long i=0; i<n; i++)
	{
	   //update maximum sum of sub-array "𝒆𝒏𝒅𝒊𝒏𝒈" at index i (by adding
	   //current element to maximum sum ending at previous index i-1)
	   maxEndingHere+=v[i];

	   //if maximum sum for sub-array ending at current index (i) is -ve, 
	   //set it to 0 (which represents an empty sub-array), ∵ adding a -ve
	   //num doesn't increase a quantity
	   maxEndingHere=max(maxEndingHere, 0);
       
       //update result if current sub-array(ending at index(i)) sum is 
       //found to be greater
	   maxSoFar=max(maxSoFar, maxEndingHere);
	}
    
    //return final result
	return maxSoFar;
}

/*Time Complexity: O(n)
  Space Complexity: O(1)
*/

---------------------------------------------------------------------------------------

//ANOTHER VARIATION OF THE JUST ABOVE CODE

long long kadaneAlgo(vector<long long> &v)
{
	long long n=v.size();
    
    //to store the maximum of all the sub-array sums calculated so far
	long long maxSoFar=v[0];

	//to store maximum sum of sub-array 𝒆𝒏𝒅𝒊𝒏𝒈 at current position (i)
	long maxEndingHere=v[0];

	for(long long i=1; i<n; i++)
	{
	   //update maximum sum of sub-array "𝒆𝒏𝒅𝒊𝒏𝒈" at index i (by adding
	   //current element to maximum sum ending at previous index i-1)
	   maxEndingHere+=v[i];

	   //if maximum sum for sub-array ending at current index (i) is -ve, 
	   //set it to 0 (which represents an empty sub-array), ∵ adding a -ve
	   //num doesn't increase a quantity
	   maxEndingHere=max(maxEndingHere, v[i]);
       
       //update result if current sub-array(ending at index(i)) sum is 
       //found to be greater
	   maxSoFar=max(maxSoFar, maxEndingHere);
	}
    
    //return final result
	return maxSoFar;
}

/* # Time Complexity: O(n)
   # Space Complexity: O(1)
   # Because of the way this algorithm uses optimal substructures (the maximum subarray ending at 
     each position is calculated in a simple way from a related but smaller and overlapping subproblem: 
     the maximum subarray ending at the previous position) this algorithm can be viewed as a simple 
     example of Dynamic Programming.
*/



